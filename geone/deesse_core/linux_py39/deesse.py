# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _deesse
else:
    import _deesse

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def fopen(filename, mode):
    return _deesse.fopen(filename, mode)

def fclose(f):
    return _deesse.fclose(f)
MPDS_VERSION_NUMBER = _deesse.MPDS_VERSION_NUMBER
MPDS_BUILD_NUMBER = _deesse.MPDS_BUILD_NUMBER
FALSE = _deesse.FALSE
TRUE = _deesse.TRUE
MPDS_FORMAT_DEFAULT = _deesse.MPDS_FORMAT_DEFAULT
MPDS_FORMAT_WIDTH = _deesse.MPDS_FORMAT_WIDTH
MPDS_FORMAT_PRECISION = _deesse.MPDS_FORMAT_PRECISION
MPDS_FILENAME_LENGTH = _deesse.MPDS_FILENAME_LENGTH
MPDS_VARNAME_LENGTH = _deesse.MPDS_VARNAME_LENGTH
MPDS_LINE_LENGTH = _deesse.MPDS_LINE_LENGTH
MPDS_WORD_LENGTH = _deesse.MPDS_WORD_LENGTH
MPDS_MISSING_VALUE = _deesse.MPDS_MISSING_VALUE
MPDS_INEQUALITY_DATA_SUFFIX_FOR_MIN = _deesse.MPDS_INEQUALITY_DATA_SUFFIX_FOR_MIN
MPDS_INEQUALITY_DATA_SUFFIX_FOR_MAX = _deesse.MPDS_INEQUALITY_DATA_SUFFIX_FOR_MAX
MPDS_JOB_VARNAME = _deesse.MPDS_JOB_VARNAME
MPDS_JOB_DATA_LOCATION = _deesse.MPDS_JOB_DATA_LOCATION
MPDS_JOB_DATA_VALUE = _deesse.MPDS_JOB_DATA_VALUE
MPDS_SHIFT_FACTOR_FOR_POINT = _deesse.MPDS_SHIFT_FACTOR_FOR_POINT
MPDS_MAX_NB_VALUE = _deesse.MPDS_MAX_NB_VALUE
MPDS_EPSILON_HARD = _deesse.MPDS_EPSILON_HARD
MPDS_EPSILON = _deesse.MPDS_EPSILON
MPDS_EPSILON_SOFT = _deesse.MPDS_EPSILON_SOFT
MPDS_INFINITY = _deesse.MPDS_INFINITY
MPDS_CHUNK = _deesse.MPDS_CHUNK
MPDS_NB_AVAILABLE_DISTANCE = _deesse.MPDS_NB_AVAILABLE_DISTANCE
MPDS_POST_PROCESSING_NNEIGHBORINGNODE_DEFAULT_1D = _deesse.MPDS_POST_PROCESSING_NNEIGHBORINGNODE_DEFAULT_1D
MPDS_POST_PROCESSING_NNEIGHBORINGNODE_DEFAULT_2D = _deesse.MPDS_POST_PROCESSING_NNEIGHBORINGNODE_DEFAULT_2D
MPDS_POST_PROCESSING_NNEIGHBORINGNODE_DEFAULT_3D = _deesse.MPDS_POST_PROCESSING_NNEIGHBORINGNODE_DEFAULT_3D
MPDS_POST_PROCESSING_NEIGHBORINGNODE_DENSITY_DEFAULT_1D = _deesse.MPDS_POST_PROCESSING_NEIGHBORINGNODE_DENSITY_DEFAULT_1D
MPDS_POST_PROCESSING_NEIGHBORINGNODE_DENSITY_DEFAULT_2D = _deesse.MPDS_POST_PROCESSING_NEIGHBORINGNODE_DENSITY_DEFAULT_2D
MPDS_POST_PROCESSING_NEIGHBORINGNODE_DENSITY_DEFAULT_3D = _deesse.MPDS_POST_PROCESSING_NEIGHBORINGNODE_DENSITY_DEFAULT_3D
MPDS_POST_PROCESSING_DISTANCE_THRESHOLD_DEFAULT_DISTANCETYPE_0 = _deesse.MPDS_POST_PROCESSING_DISTANCE_THRESHOLD_DEFAULT_DISTANCETYPE_0
MPDS_POST_PROCESSING_DISTANCE_THRESHOLD_DEFAULT_DISTANCETYPE_1 = _deesse.MPDS_POST_PROCESSING_DISTANCE_THRESHOLD_DEFAULT_DISTANCETYPE_1
MPDS_POST_PROCESSING_DISTANCE_THRESHOLD_DEFAULT_DISTANCETYPE_2 = _deesse.MPDS_POST_PROCESSING_DISTANCE_THRESHOLD_DEFAULT_DISTANCETYPE_2
MPDS_POST_PROCESSING_DISTANCE_THRESHOLD_DEFAULT_DISTANCETYPE_3 = _deesse.MPDS_POST_PROCESSING_DISTANCE_THRESHOLD_DEFAULT_DISTANCETYPE_3
MPDS_POST_PROCESSING_DISTANCE_THRESHOLD_DEFAULT_DISTANCETYPE_4 = _deesse.MPDS_POST_PROCESSING_DISTANCE_THRESHOLD_DEFAULT_DISTANCETYPE_4
MPDS_POST_PROCESSING_MAX_SCAN_FRACTION_DEFAULT = _deesse.MPDS_POST_PROCESSING_MAX_SCAN_FRACTION_DEFAULT
MPDS_POST_PROCESSING_TOLERANCE_DEFAULT = _deesse.MPDS_POST_PROCESSING_TOLERANCE_DEFAULT
MPDS_POST_PROCESSING_SEED_INCREMENT = _deesse.MPDS_POST_PROCESSING_SEED_INCREMENT
MPDS_SIMULATION_GRID_AS_TRAINING_IMAGE = _deesse.MPDS_SIMULATION_GRID_AS_TRAINING_IMAGE
MPDS_USE_TRAINING_IMAGE_FOR_CONNECTIVITY = _deesse.MPDS_USE_TRAINING_IMAGE_FOR_CONNECTIVITY
MPDS_PREFIX_FOR_TEMPORARY_FILE = _deesse.MPDS_PREFIX_FOR_TEMPORARY_FILE
MPDS_PREFIX_FOR_OCCURRENCE_PROPORTION = _deesse.MPDS_PREFIX_FOR_OCCURRENCE_PROPORTION
MPDS_SUFFIX_FOR_REALIZATION = _deesse.MPDS_SUFFIX_FOR_REALIZATION
MPDS_SUFFIX_FOR_CLOSING = _deesse.MPDS_SUFFIX_FOR_CLOSING
MPDS_SUFFIX_FOR_CONNECTIVITY_FUNCTION = _deesse.MPDS_SUFFIX_FOR_CONNECTIVITY_FUNCTION
MPDS_SUFFIX_FOR_CORRELOGRAM = _deesse.MPDS_SUFFIX_FOR_CORRELOGRAM
MPDS_SUFFIX_FOR_COVARIANCE = _deesse.MPDS_SUFFIX_FOR_COVARIANCE
MPDS_SUFFIX_FOR_COVARIANCE_NOT_CENTRED = _deesse.MPDS_SUFFIX_FOR_COVARIANCE_NOT_CENTRED
MPDS_SUFFIX_FOR_DILATING = _deesse.MPDS_SUFFIX_FOR_DILATING
MPDS_SUFFIX_FOR_DISTANCE_DILATING = _deesse.MPDS_SUFFIX_FOR_DISTANCE_DILATING
MPDS_SUFFIX_FOR_DISTANCE_L1 = _deesse.MPDS_SUFFIX_FOR_DISTANCE_L1
MPDS_SUFFIX_FOR_DISTANCE_L1_SIGN = _deesse.MPDS_SUFFIX_FOR_DISTANCE_L1_SIGN
MPDS_SUFFIX_FOR_DISTANCE_L2 = _deesse.MPDS_SUFFIX_FOR_DISTANCE_L2
MPDS_SUFFIX_FOR_DISTANCE_L2_SIGN = _deesse.MPDS_SUFFIX_FOR_DISTANCE_L2_SIGN
MPDS_SUFFIX_FOR_ERODING = _deesse.MPDS_SUFFIX_FOR_ERODING
MPDS_SUFFIX_FOR_GEOBODY = _deesse.MPDS_SUFFIX_FOR_GEOBODY
MPDS_SUFFIX_FOR_INDICATOR = _deesse.MPDS_SUFFIX_FOR_INDICATOR
MPDS_SUFFIX_FOR_MOVING_SN_AVERAGE = _deesse.MPDS_SUFFIX_FOR_MOVING_SN_AVERAGE
MPDS_SUFFIX_FOR_MOVING_BOX_AVERAGE = _deesse.MPDS_SUFFIX_FOR_MOVING_BOX_AVERAGE
MPDS_SUFFIX_FOR_GAUSSIAN_PYRAMID_EXP = _deesse.MPDS_SUFFIX_FOR_GAUSSIAN_PYRAMID_EXP
MPDS_SUFFIX_FOR_GAUSSIAN_PYRAMID_LAP = _deesse.MPDS_SUFFIX_FOR_GAUSSIAN_PYRAMID_LAP
MPDS_SUFFIX_FOR_GAUSSIAN_PYRAMID_RED = _deesse.MPDS_SUFFIX_FOR_GAUSSIAN_PYRAMID_RED
MPDS_SUFFIX_FOR_OPENING = _deesse.MPDS_SUFFIX_FOR_OPENING
MPDS_SUFFIX_FOR_QC_INDICATOR_SCALE = _deesse.MPDS_SUFFIX_FOR_QC_INDICATOR_SCALE
MPDS_SUFFIX_FOR_QC_INDICATOR_MARK_MEAN_AND_SD_SCALE = _deesse.MPDS_SUFFIX_FOR_QC_INDICATOR_MARK_MEAN_AND_SD_SCALE
MPDS_SUFFIX_FOR_QC_INDICATOR_MARK_QUANTILE_SCALE = _deesse.MPDS_SUFFIX_FOR_QC_INDICATOR_MARK_QUANTILE_SCALE
MPDS_SUFFIX_FOR_QC_INDICATOR_MARK_DETAIL_SCALE = _deesse.MPDS_SUFFIX_FOR_QC_INDICATOR_MARK_DETAIL_SCALE
MPDS_SUFFIX_FOR_QC_INDICATOR_ALL_PAIRS_SCALE = _deesse.MPDS_SUFFIX_FOR_QC_INDICATOR_ALL_PAIRS_SCALE
MPDS_SUFFIX_FOR_QC_INDICATOR_ENSEMBLE = _deesse.MPDS_SUFFIX_FOR_QC_INDICATOR_ENSEMBLE
MPDS_SUFFIX_FOR_QC_MPH_PATTERN_COUNT_SUM_ENSEMBLE = _deesse.MPDS_SUFFIX_FOR_QC_MPH_PATTERN_COUNT_SUM_ENSEMBLE
MPDS_SUFFIX_FOR_QC_ENSEMBLE_ZONE = _deesse.MPDS_SUFFIX_FOR_QC_ENSEMBLE_ZONE
MPDS_SUFFIX_FOR_QC_ENSEMBLE_ZONE_DESCRIPTION = _deesse.MPDS_SUFFIX_FOR_QC_ENSEMBLE_ZONE_DESCRIPTION
MPDS_SUFFIX_FOR_QC_ENSEMBLE_DESCRIPTION = _deesse.MPDS_SUFFIX_FOR_QC_ENSEMBLE_DESCRIPTION
MPDS_SUFFIX_FOR_QC_IMAGE_PATTERN_DISTANCE = _deesse.MPDS_SUFFIX_FOR_QC_IMAGE_PATTERN_DISTANCE
MPDS_SUFFIX_FOR_TRANSIOGRAM = _deesse.MPDS_SUFFIX_FOR_TRANSIOGRAM
MPDS_SUFFIX_FOR_VARIOGRAM = _deesse.MPDS_SUFFIX_FOR_VARIOGRAM
MPDS_EXTENSION_FOR_IMAGE_FILE = _deesse.MPDS_EXTENSION_FOR_IMAGE_FILE
MPDS_EXTENSION_FOR_TEXT_FILE = _deesse.MPDS_EXTENSION_FOR_TEXT_FILE
MPDS_EXTENSION_FOR_INPUT_FILE = _deesse.MPDS_EXTENSION_FOR_INPUT_FILE
MPDS_EXTENSION_FOR_BLOCK_DATA_FILE = _deesse.MPDS_EXTENSION_FOR_BLOCK_DATA_FILE
MPDS_NAME_FOR_PGM_VAR = _deesse.MPDS_NAME_FOR_PGM_VAR
MPDS_NAME_FOR_PPM_VAR0 = _deesse.MPDS_NAME_FOR_PPM_VAR0
MPDS_NAME_FOR_PPM_VAR1 = _deesse.MPDS_NAME_FOR_PPM_VAR1
MPDS_NAME_FOR_PPM_VAR2 = _deesse.MPDS_NAME_FOR_PPM_VAR2
MPDS_NAME_FOR_PATH_INDEX_VAR = _deesse.MPDS_NAME_FOR_PATH_INDEX_VAR
MPDS_NAME_FOR_ERROR_VAR = _deesse.MPDS_NAME_FOR_ERROR_VAR
MPDS_NAME_FOR_TI_GRID_NODE_INDEX_VAR = _deesse.MPDS_NAME_FOR_TI_GRID_NODE_INDEX_VAR
MPDS_NAME_FOR_TI_INDEX_VAR = _deesse.MPDS_NAME_FOR_TI_INDEX_VAR
MPDS_NB_DIGIT_FOR_REALIZATION_NUMBER = _deesse.MPDS_NB_DIGIT_FOR_REALIZATION_NUMBER
MPDS_NB_DIGIT_FOR_SCALE_NUMBER = _deesse.MPDS_NB_DIGIT_FOR_SCALE_NUMBER
MPDS_NB_DIGIT_FOR_ZONE_NUMBER = _deesse.MPDS_NB_DIGIT_FOR_ZONE_NUMBER
MPDS_NB_DIGIT_FOR_VARIABLE_NUMBER = _deesse.MPDS_NB_DIGIT_FOR_VARIABLE_NUMBER
MPDS_NB_DIGIT_FOR_QC_NUMBER = _deesse.MPDS_NB_DIGIT_FOR_QC_NUMBER
MPDS_NB_DIGIT_FOR_ENSEMBLE_NUMBER = _deesse.MPDS_NB_DIGIT_FOR_ENSEMBLE_NUMBER
MPDS_NB_DIGIT_FOR_VALUE_NAME = _deesse.MPDS_NB_DIGIT_FOR_VALUE_NAME
MPDS_VTK_VERSION_NUMBER = _deesse.MPDS_VTK_VERSION_NUMBER
MPDS_SEPARATION_LINE_EQUAL = _deesse.MPDS_SEPARATION_LINE_EQUAL
MPDS_SEPARATION_LINE_STAR = _deesse.MPDS_SEPARATION_LINE_STAR
MPDS_SEPARATION_LINE_MINUS = _deesse.MPDS_SEPARATION_LINE_MINUS
MPDS_SEPARATION_LINE_PLUS = _deesse.MPDS_SEPARATION_LINE_PLUS
MPDS_NODEPATH_WEIGHT_MIN = _deesse.MPDS_NODEPATH_WEIGHT_MIN
MPDS_NODEPATH_A0_MIN = _deesse.MPDS_NODEPATH_A0_MIN
MPDS_NODEPATH_A0_MAX = _deesse.MPDS_NODEPATH_A0_MAX
MPDS_MIN_SPACING = _deesse.MPDS_MIN_SPACING
MPDS_MAX_NSIMVAR = _deesse.MPDS_MAX_NSIMVAR
MPDS_MAX_NVAR = _deesse.MPDS_MAX_NVAR
MPDS_MAX_NXYZ = _deesse.MPDS_MAX_NXYZ
MPDS_MAX_NXYZV = _deesse.MPDS_MAX_NXYZV
MPDS_MIN_ANISOTROPY_RATIO = _deesse.MPDS_MIN_ANISOTROPY_RATIO
MPDS_MAX_NTRAINIMAGE = _deesse.MPDS_MAX_NTRAINIMAGE
MPDS_MAX_TRAINVALUERANGEEXTENSIONMAX = _deesse.MPDS_MAX_TRAINVALUERANGEEXTENSIONMAX
MPDS_MAX_TRAIN_MISSING_VALUE_PROPORTION_FOR_WARNING = _deesse.MPDS_MAX_TRAIN_MISSING_VALUE_PROPORTION_FOR_WARNING
MPDS_MIN_NNEIGHBORINGNODE = _deesse.MPDS_MIN_NNEIGHBORINGNODE
MPDS_MAX_NNEIGHBORINGNODE = _deesse.MPDS_MAX_NNEIGHBORINGNODE
MPDS_MAX_NNEIGHBORINGNODE_ALL_VAR = _deesse.MPDS_MAX_NNEIGHBORINGNODE_ALL_VAR
MPDS_MIN_MAX_PROP_INEQUALITY_NODE = _deesse.MPDS_MIN_MAX_PROP_INEQUALITY_NODE
MPDS_MAX_MAX_PROP_INEQUALITY_NODE = _deesse.MPDS_MAX_MAX_PROP_INEQUALITY_NODE
MPDS_MIN_NEIGHBORINGNODE_DENSITY = _deesse.MPDS_MIN_NEIGHBORINGNODE_DENSITY
MPDS_MAX_NEIGHBORINGNODE_DENSITY = _deesse.MPDS_MAX_NEIGHBORINGNODE_DENSITY
MPDS_MIN_DISTANCETHRESHOLD = _deesse.MPDS_MIN_DISTANCETHRESHOLD
MPDS_MAX_DISTANCETHRESHOLD = _deesse.MPDS_MAX_DISTANCETHRESHOLD
MPDS_MIN_MAXSCANFRACTION = _deesse.MPDS_MIN_MAXSCANFRACTION
MPDS_MAX_MAXSCANFRACTION = _deesse.MPDS_MAX_MAXSCANFRACTION
MPDS_MIN_MAXSCANFRACTION_VARIABLE_TRANSFORM = _deesse.MPDS_MIN_MAXSCANFRACTION_VARIABLE_TRANSFORM
MPDS_MAX_MAXSCANFRACTION_VARIABLE_TRANSFORM = _deesse.MPDS_MAX_MAXSCANFRACTION_VARIABLE_TRANSFORM
MPDS_MIN_TOLERANCE = _deesse.MPDS_MIN_TOLERANCE
MPDS_MAX_TOLERANCE = _deesse.MPDS_MAX_TOLERANCE
MPDS_MIN_TARGET_INTERVAL_LENGTH = _deesse.MPDS_MIN_TARGET_INTERVAL_LENGTH
MPDS_MAX_NPOSTPROCESSINGPATHMAX = _deesse.MPDS_MAX_NPOSTPROCESSINGPATHMAX
MPDS_MAX_NREALIZATION = _deesse.MPDS_MAX_NREALIZATION
MPDS_MAX_RATIO_SEARCHNEIGHBORHOOD_SIZE_OVER_TI_SIZE = _deesse.MPDS_MAX_RATIO_SEARCHNEIGHBORHOOD_SIZE_OVER_TI_SIZE
MPDS_SEARCHNEIGHBORHOOD_RADIUS_RANGE_FACTOR = _deesse.MPDS_SEARCHNEIGHBORHOOD_RADIUS_RANGE_FACTOR
MPDS_APPROX_RANGE_TOLERANCE = _deesse.MPDS_APPROX_RANGE_TOLERANCE
MPDS_MIN_HOMOTHETY_RATIO = _deesse.MPDS_MIN_HOMOTHETY_RATIO
MPDS_MAX_HOMOTHETY_RATIO = _deesse.MPDS_MAX_HOMOTHETY_RATIO
MPDS_MIN_SOFT_PROBABILITY_NCLASS = _deesse.MPDS_MIN_SOFT_PROBABILITY_NCLASS
MPDS_MAX_SOFT_PROBABILITY_NCLASS = _deesse.MPDS_MAX_SOFT_PROBABILITY_NCLASS
MPDS_GLOBAL_PROBABILITY_SYNC_STEP_MIN = _deesse.MPDS_GLOBAL_PROBABILITY_SYNC_STEP_MIN
MPDS_GLOBAL_PROBABILITY_SYNC_STEP_MAX = _deesse.MPDS_GLOBAL_PROBABILITY_SYNC_STEP_MAX
MPDS_GLOBAL_PROBABILITY_SYNC_STEP_FACTOR = _deesse.MPDS_GLOBAL_PROBABILITY_SYNC_STEP_FACTOR
MPDS_MAX_RATIO_TEMPLATE_SIZE_PRODUCT_OVER_IMAGE_SIZE_PRODUCT = _deesse.MPDS_MAX_RATIO_TEMPLATE_SIZE_PRODUCT_OVER_IMAGE_SIZE_PRODUCT
MPDS_TOLEREANCE_ON_SUM_SOFT_PROBABILITY = _deesse.MPDS_TOLEREANCE_ON_SUM_SOFT_PROBABILITY
MPDS_MIN_PROBABILITY_CONSTRAINT_CONSTANT_THRESHOLD = _deesse.MPDS_MIN_PROBABILITY_CONSTRAINT_CONSTANT_THRESHOLD
MPDS_MAX_PROBABILITY_CONSTRAINT_CONSTANT_THRESHOLD = _deesse.MPDS_MAX_PROBABILITY_CONSTRAINT_CONSTANT_THRESHOLD
MPDS_MIN_PROBABILITY_CONSTRAINT_INDICATOR_VARIANCE = _deesse.MPDS_MIN_PROBABILITY_CONSTRAINT_INDICATOR_VARIANCE
MPDS_MAX_PROBABILITY_CONSTRAINT_MISMATCH = _deesse.MPDS_MAX_PROBABILITY_CONSTRAINT_MISMATCH
MPDS_LOCAL_PROBABILITY_CONSTRAINT_TABLE_LENGTH = _deesse.MPDS_LOCAL_PROBABILITY_CONSTRAINT_TABLE_LENGTH
MPDS_MIN_CONNECTIVITY_CONSTRAINT_THRESHOLD = _deesse.MPDS_MIN_CONNECTIVITY_CONSTRAINT_THRESHOLD
MPDS_MAX_CONNECTIVITY_CONSTRAINT_THRESHOLD = _deesse.MPDS_MAX_CONNECTIVITY_CONSTRAINT_THRESHOLD
MPDS_MAX_POWER_PATH_RANDOM_HD_DISTANCE_SUM = _deesse.MPDS_MAX_POWER_PATH_RANDOM_HD_DISTANCE_SUM
MPDS_CHANGE_TRANSFORMATION_STEP = _deesse.MPDS_CHANGE_TRANSFORMATION_STEP
MPDS_NDYNAMICTHRESHOLDPARAMETERS = _deesse.MPDS_NDYNAMICTHRESHOLDPARAMETERS
MPDS_MIN_BLOCK_DATA_LOCAL_VAR = _deesse.MPDS_MIN_BLOCK_DATA_LOCAL_VAR
MPDS_MIN_BLOCK_DATA_KERNEL_BANDWIDTH = _deesse.MPDS_MIN_BLOCK_DATA_KERNEL_BANDWIDTH
MPDS_MAX_BLOCK_DATA_SAMPLED_REGION = _deesse.MPDS_MAX_BLOCK_DATA_SAMPLED_REGION
MPDS_MAX_NB_RANDOM_TRY_FOR_INEQUALITY_DATA = _deesse.MPDS_MAX_NB_RANDOM_TRY_FOR_INEQUALITY_DATA
MPDS_PYRAMID_NLEVEL_MAX = _deesse.MPDS_PYRAMID_NLEVEL_MAX
MPDS_PYRAMID_FACTOR_MAX_N_NEIGHBOR_MIN = _deesse.MPDS_PYRAMID_FACTOR_MAX_N_NEIGHBOR_MIN
MPDS_PYRAMID_FACTOR_MAX_N_NEIGHBOR_MAX = _deesse.MPDS_PYRAMID_FACTOR_MAX_N_NEIGHBOR_MAX
MPDS_PYRAMID_FACTOR_DISTANCE_THRESHOLD_MIN = _deesse.MPDS_PYRAMID_FACTOR_DISTANCE_THRESHOLD_MIN
MPDS_PYRAMID_FACTOR_DISTANCE_THRESHOLD_MAX = _deesse.MPDS_PYRAMID_FACTOR_DISTANCE_THRESHOLD_MAX
MPDS_PYRAMID_FACTOR_MAX_SCAN_FRACTION_MIN = _deesse.MPDS_PYRAMID_FACTOR_MAX_SCAN_FRACTION_MIN
MPDS_PYRAMID_FACTOR_MAX_SCAN_FRACTION_MAX = _deesse.MPDS_PYRAMID_FACTOR_MAX_SCAN_FRACTION_MAX
MPDS_PYRAMID_REDUCTION_FACTOR_MAX = _deesse.MPDS_PYRAMID_REDUCTION_FACTOR_MAX
MPDS_PYRAMID_CATEGORICAL_NCLASS_MAX = _deesse.MPDS_PYRAMID_CATEGORICAL_NCLASS_MAX
MPDS_GAUSSIAN_PYRAMID_RED_TOTAL_WEIGHT_MIN = _deesse.MPDS_GAUSSIAN_PYRAMID_RED_TOTAL_WEIGHT_MIN
MPDS_GAUSSIAN_PYRAMID_EXP_TOTAL_WEIGHT_MIN = _deesse.MPDS_GAUSSIAN_PYRAMID_EXP_TOTAL_WEIGHT_MIN
MPDS_MIN_WEIGHT_PROPORTION_MOVING_BOX_SUM = _deesse.MPDS_MIN_WEIGHT_PROPORTION_MOVING_BOX_SUM
MPDS_MISSING_CLASSID = _deesse.MPDS_MISSING_CLASSID
MPDS_MIN_MPH_NCLASS = _deesse.MPDS_MIN_MPH_NCLASS
MPDS_MAX_MPH_NCLASS = _deesse.MPDS_MAX_MPH_NCLASS
MPDS_QC_NZONE_MAX = _deesse.MPDS_QC_NZONE_MAX
MPDS_QC_NTRENDVAR_MAX = _deesse.MPDS_QC_NTRENDVAR_MAX
MPDS_GRAPH_MAX_NLOOPMAX = _deesse.MPDS_GRAPH_MAX_NLOOPMAX
MPDS_GRAPH_MIN_CONNECTIVITY_CHECK_DIST_TO_EDGE_FACTOR = _deesse.MPDS_GRAPH_MIN_CONNECTIVITY_CHECK_DIST_TO_EDGE_FACTOR
MPDS_GRAPH_MAX_CONNECTIVITY_CHECK_DIST_TO_EDGE_FACTOR = _deesse.MPDS_GRAPH_MAX_CONNECTIVITY_CHECK_DIST_TO_EDGE_FACTOR
MPDS_CONNECTIVITY_GAMMA_VALUE_IF_NO_GEOBODY = _deesse.MPDS_CONNECTIVITY_GAMMA_VALUE_IF_NO_GEOBODY
MPDS_PRIME_NUMBER_LIST_SIZE = _deesse.MPDS_PRIME_NUMBER_LIST_SIZE
OUTPUT_FILE_NONE = _deesse.OUTPUT_FILE_NONE
OUTPUT_FILE_ASCII = _deesse.OUTPUT_FILE_ASCII
OUTPUT_FILE_BINARY = _deesse.OUTPUT_FILE_BINARY
class mpds_blockData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    blockDataUsage = property(_deesse.mpds_blockData_blockDataUsage_get, _deesse.mpds_blockData_blockDataUsage_set)
    nblock = property(_deesse.mpds_blockData_nblock_get, _deesse.mpds_blockData_nblock_set)
    nnode = property(_deesse.mpds_blockData_nnode_get, _deesse.mpds_blockData_nnode_set)
    ix = property(_deesse.mpds_blockData_ix_get, _deesse.mpds_blockData_ix_set)
    iy = property(_deesse.mpds_blockData_iy_get, _deesse.mpds_blockData_iy_set)
    iz = property(_deesse.mpds_blockData_iz_get, _deesse.mpds_blockData_iz_set)
    value = property(_deesse.mpds_blockData_value_get, _deesse.mpds_blockData_value_set)
    tolerance = property(_deesse.mpds_blockData_tolerance_get, _deesse.mpds_blockData_tolerance_set)
    activatePropMin = property(_deesse.mpds_blockData_activatePropMin_get, _deesse.mpds_blockData_activatePropMin_set)
    activatePropMax = property(_deesse.mpds_blockData_activatePropMax_get, _deesse.mpds_blockData_activatePropMax_set)

    def __init__(self):
        _deesse.mpds_blockData_swiginit(self, _deesse.new_mpds_blockData())
    __swig_destroy__ = _deesse.delete_mpds_blockData

# Register mpds_blockData in _deesse:
_deesse.mpds_blockData_swigregister(mpds_blockData)
cvar = _deesse.cvar
stdout = cvar.stdout


def MPDSFreeBlockData(arg1):
    return _deesse.MPDSFreeBlockData(arg1)

def MPDSInitBlockData(arg1):
    return _deesse.MPDSInitBlockData(arg1)

def MPDSPrintBlockData(arg1, arg2, arg3):
    return _deesse.MPDSPrintBlockData(arg1, arg2, arg3)

def MPDSValidateBlockData(arg1, arg2, arg3, arg4):
    return _deesse.MPDSValidateBlockData(arg1, arg2, arg3, arg4)

def MPDSWriteBlockData(arg1, arg2):
    return _deesse.MPDSWriteBlockData(arg1, arg2)
MPDS_MIN_CLASS_OF_VALUES_NCLASS = _deesse.MPDS_MIN_CLASS_OF_VALUES_NCLASS
MPDS_MAX_CLASS_OF_VALUES_NCLASS = _deesse.MPDS_MAX_CLASS_OF_VALUES_NCLASS
MPDS_MIN_CLASS_OF_VALUES_NINTERVAL = _deesse.MPDS_MIN_CLASS_OF_VALUES_NINTERVAL
MPDS_MAX_CLASS_OF_VALUES_NINTERVAL = _deesse.MPDS_MAX_CLASS_OF_VALUES_NINTERVAL
class mpds_classOfValues(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nclass = property(_deesse.mpds_classOfValues_nclass_get, _deesse.mpds_classOfValues_nclass_set)
    ninterval = property(_deesse.mpds_classOfValues_ninterval_get, _deesse.mpds_classOfValues_ninterval_set)
    intervalInf = property(_deesse.mpds_classOfValues_intervalInf_get, _deesse.mpds_classOfValues_intervalInf_set)
    intervalSup = property(_deesse.mpds_classOfValues_intervalSup_get, _deesse.mpds_classOfValues_intervalSup_set)

    def __init__(self):
        _deesse.mpds_classOfValues_swiginit(self, _deesse.new_mpds_classOfValues())
    __swig_destroy__ = _deesse.delete_mpds_classOfValues

# Register mpds_classOfValues in _deesse:
_deesse.mpds_classOfValues_swigregister(mpds_classOfValues)


def MPDSCopyClassOfValues(arg1, arg2):
    return _deesse.MPDSCopyClassOfValues(arg1, arg2)

def MPDSFreeClassOfValues(arg1):
    return _deesse.MPDSFreeClassOfValues(arg1)

def MPDSInitClassOfValues(arg1):
    return _deesse.MPDSInitClassOfValues(arg1)

def MPDSPrintClassOfValues(arg1, arg2, arg3):
    return _deesse.MPDSPrintClassOfValues(arg1, arg2, arg3)

def MPDSReadClassOfValues(arg1, arg2):
    return _deesse.MPDSReadClassOfValues(arg1, arg2)

def MPDSTransformLinearClassOfValues(arg1, arg2, arg3):
    return _deesse.MPDSTransformLinearClassOfValues(arg1, arg2, arg3)

def MPDSValidateClassOfValues(arg1, arg2):
    return _deesse.MPDSValidateClassOfValues(arg1, arg2)
CONNECT_FACE = _deesse.CONNECT_FACE
CONNECT_FACE_EDGE = _deesse.CONNECT_FACE_EDGE
CONNECT_FACE_EDGE_CORNER = _deesse.CONNECT_FACE_EDGE_CORNER
class mpds_connectivity(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    connectivityConstraintUsage = property(_deesse.mpds_connectivity_connectivityConstraintUsage_get, _deesse.mpds_connectivity_connectivityConstraintUsage_set)
    connectivityType = property(_deesse.mpds_connectivity_connectivityType_get, _deesse.mpds_connectivity_connectivityType_set)
    classOfValues = property(_deesse.mpds_connectivity_classOfValues_get, _deesse.mpds_connectivity_classOfValues_set)
    varName = property(_deesse.mpds_connectivity_varName_get, _deesse.mpds_connectivity_varName_set)
    tiAsRefFlag = property(_deesse.mpds_connectivity_tiAsRefFlag_get, _deesse.mpds_connectivity_tiAsRefFlag_set)
    refConnectivityImage = property(_deesse.mpds_connectivity_refConnectivityImage_get, _deesse.mpds_connectivity_refConnectivityImage_set)
    deactivationDistance = property(_deesse.mpds_connectivity_deactivationDistance_get, _deesse.mpds_connectivity_deactivationDistance_set)
    threshold = property(_deesse.mpds_connectivity_threshold_get, _deesse.mpds_connectivity_threshold_set)

    def __init__(self):
        _deesse.mpds_connectivity_swiginit(self, _deesse.new_mpds_connectivity())
    __swig_destroy__ = _deesse.delete_mpds_connectivity

# Register mpds_connectivity in _deesse:
_deesse.mpds_connectivity_swigregister(mpds_connectivity)


def MPDSFreeConnectivity(arg1):
    return _deesse.MPDSFreeConnectivity(arg1)

def MPDSImageToImageWithConnectivityLabel(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _deesse.MPDSImageToImageWithConnectivityLabel(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)

def MPDSInitConnectivity(arg1):
    return _deesse.MPDSInitConnectivity(arg1)

def MPDSPointSetToImageWithConnectivityLabel(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10):
    return _deesse.MPDSPointSetToImageWithConnectivityLabel(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)

def MPDSPrintConnectivity(arg1, arg2, arg3):
    return _deesse.MPDSPrintConnectivity(arg1, arg2, arg3)

def MPDSValidateConnectivity(arg1, arg2):
    return _deesse.MPDSValidateConnectivity(arg1, arg2)
class mpds_grid(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nx = property(_deesse.mpds_grid_nx_get, _deesse.mpds_grid_nx_set)
    ny = property(_deesse.mpds_grid_ny_get, _deesse.mpds_grid_ny_set)
    nz = property(_deesse.mpds_grid_nz_get, _deesse.mpds_grid_nz_set)
    sx = property(_deesse.mpds_grid_sx_get, _deesse.mpds_grid_sx_set)
    sy = property(_deesse.mpds_grid_sy_get, _deesse.mpds_grid_sy_set)
    sz = property(_deesse.mpds_grid_sz_get, _deesse.mpds_grid_sz_set)
    ox = property(_deesse.mpds_grid_ox_get, _deesse.mpds_grid_ox_set)
    oy = property(_deesse.mpds_grid_oy_get, _deesse.mpds_grid_oy_set)
    oz = property(_deesse.mpds_grid_oz_get, _deesse.mpds_grid_oz_set)
    nxy = property(_deesse.mpds_grid_nxy_get, _deesse.mpds_grid_nxy_set)
    nxyz = property(_deesse.mpds_grid_nxyz_get, _deesse.mpds_grid_nxyz_set)

    def __init__(self):
        _deesse.mpds_grid_swiginit(self, _deesse.new_mpds_grid())
    __swig_destroy__ = _deesse.delete_mpds_grid

# Register mpds_grid in _deesse:
_deesse.mpds_grid_swigregister(mpds_grid)


def MPDSCmpGrid(arg1, arg2):
    return _deesse.MPDSCmpGrid(arg1, arg2)

def MPDSCopyGrid(arg1, arg2):
    return _deesse.MPDSCopyGrid(arg1, arg2)

def MPDSGridCoordToId(arg1, arg2, arg3, arg4, arg5, arg6):
    return _deesse.MPDSGridCoordToId(arg1, arg2, arg3, arg4, arg5, arg6)

def MPDSGridIdToCoord(arg1, arg2, arg3, arg4, arg5, arg6):
    return _deesse.MPDSGridIdToCoord(arg1, arg2, arg3, arg4, arg5, arg6)

def MPDSInitGrid(arg1):
    return _deesse.MPDSInitGrid(arg1)

def MPDSPrintGrid(arg1, arg2, arg3):
    return _deesse.MPDSPrintGrid(arg1, arg2, arg3)

def MPDSReadGrid(arg1, arg2):
    return _deesse.MPDSReadGrid(arg1, arg2)

def MPDSValidateGrid(arg1, arg2):
    return _deesse.MPDSValidateGrid(arg1, arg2)
class mpds_image(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    grid = property(_deesse.mpds_image_grid_get, _deesse.mpds_image_grid_set)
    nvar = property(_deesse.mpds_image_nvar_get, _deesse.mpds_image_nvar_set)
    nxyzv = property(_deesse.mpds_image_nxyzv_get, _deesse.mpds_image_nxyzv_set)
    varName = property(_deesse.mpds_image_varName_get, _deesse.mpds_image_varName_set)
    var = property(_deesse.mpds_image_var_get, _deesse.mpds_image_var_set)

    def __init__(self):
        _deesse.mpds_image_swiginit(self, _deesse.new_mpds_image())
    __swig_destroy__ = _deesse.delete_mpds_image

# Register mpds_image in _deesse:
_deesse.mpds_image_swigregister(mpds_image)


def MPDSCopyImage(arg1, arg2):
    return _deesse.MPDSCopyImage(arg1, arg2)

def MPDSFreeImage(arg1):
    return _deesse.MPDSFreeImage(arg1)

def MPDSGetImageOneVarValueIndex(arg1, arg2, arg3, arg4, arg5):
    return _deesse.MPDSGetImageOneVarValueIndex(arg1, arg2, arg3, arg4, arg5)

def MPDSGetImageNumberVarValueMissing(arg1, arg2):
    return _deesse.MPDSGetImageNumberVarValueMissing(arg1, arg2)

def MPDSGetImageOneVarValueMean(arg1, arg2, arg3):
    return _deesse.MPDSGetImageOneVarValueMean(arg1, arg2, arg3)

def MPDSGetImageOneVarValuePdf(arg1, arg2, arg3, arg4, arg5, arg6):
    return _deesse.MPDSGetImageOneVarValuePdf(arg1, arg2, arg3, arg4, arg5, arg6)

def MPDSGetImageOneVarValueRange(arg1, arg2, arg3, arg4, arg5, arg6):
    return _deesse.MPDSGetImageOneVarValueRange(arg1, arg2, arg3, arg4, arg5, arg6)

def MPDSGetImageOneVarValueSD(arg1, arg2, arg3, arg4):
    return _deesse.MPDSGetImageOneVarValueSD(arg1, arg2, arg3, arg4)

def MPDSGetImageVarStats(arg1, arg2, arg3, arg4, arg5, arg6):
    return _deesse.MPDSGetImageVarStats(arg1, arg2, arg3, arg4, arg5, arg6)

def MPDSGetImageVarStatsLocal(arg1, arg2, arg3, arg4):
    return _deesse.MPDSGetImageVarStatsLocal(arg1, arg2, arg3, arg4)

def MPDSGetImageVarValueMean(arg1, arg2):
    return _deesse.MPDSGetImageVarValueMean(arg1, arg2)

def MPDSGetImageVarValuePdf(arg1, arg2, arg3, arg4, arg5):
    return _deesse.MPDSGetImageVarValuePdf(arg1, arg2, arg3, arg4, arg5)

def MPDSGetImageVarValueRange(arg1, arg2, arg3, arg4, arg5):
    return _deesse.MPDSGetImageVarValueRange(arg1, arg2, arg3, arg4, arg5)

def MPDSGetImageVarValueSD(arg1, arg2, arg3):
    return _deesse.MPDSGetImageVarValueSD(arg1, arg2, arg3)

def MPDSGetImageVarVectorMissing(arg1, arg2, arg3):
    return _deesse.MPDSGetImageVarVectorMissing(arg1, arg2, arg3)

def MPDSGetNImageOneVarValuePdf(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _deesse.MPDSGetNImageOneVarValuePdf(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def MPDSGetNImageVarValuePdf(arg1, arg2, arg3, arg4, arg5, arg6):
    return _deesse.MPDSGetNImageVarValuePdf(arg1, arg2, arg3, arg4, arg5, arg6)

def MPDSImageToImage(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _deesse.MPDSImageToImage(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)

def MPDSInitImage(arg1):
    return _deesse.MPDSInitImage(arg1)

def MPDSMallocImage(arg1, arg2, arg3):
    return _deesse.MPDSMallocImage(arg1, arg2, arg3)

def MPDSPrintImage(arg1, arg2, arg3):
    return _deesse.MPDSPrintImage(arg1, arg2, arg3)

def MPDSPrintImageInfo(arg1, arg2, arg3, arg4):
    return _deesse.MPDSPrintImageInfo(arg1, arg2, arg3, arg4)

def MPDSReadImage(arg1, arg2, arg3):
    return _deesse.MPDSReadImage(arg1, arg2, arg3)

def MPDSReadImageGslibBinary(arg1, arg2):
    return _deesse.MPDSReadImageGslibBinary(arg1, arg2)

def MPDSTransformLinearImageVar(arg1, arg2, arg3, arg4):
    return _deesse.MPDSTransformLinearImageVar(arg1, arg2, arg3, arg4)

def MPDSTransformExplicitImageVar(arg1, arg2, arg3, arg4, arg5):
    return _deesse.MPDSTransformExplicitImageVar(arg1, arg2, arg3, arg4, arg5)

def MPDSValidateImage(arg1, arg2, arg3):
    return _deesse.MPDSValidateImage(arg1, arg2, arg3)

def MPDSWriteImage(arg1, arg2, arg3, arg4):
    return _deesse.MPDSWriteImage(arg1, arg2, arg3, arg4)

def MPDSWriteImageGslibBinary(arg1, arg2):
    return _deesse.MPDSWriteImageGslibBinary(arg1, arg2)
class mpds_pointSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    npoint = property(_deesse.mpds_pointSet_npoint_get, _deesse.mpds_pointSet_npoint_set)
    x = property(_deesse.mpds_pointSet_x_get, _deesse.mpds_pointSet_x_set)
    y = property(_deesse.mpds_pointSet_y_get, _deesse.mpds_pointSet_y_set)
    z = property(_deesse.mpds_pointSet_z_get, _deesse.mpds_pointSet_z_set)
    nvar = property(_deesse.mpds_pointSet_nvar_get, _deesse.mpds_pointSet_nvar_set)
    varName = property(_deesse.mpds_pointSet_varName_get, _deesse.mpds_pointSet_varName_set)
    var = property(_deesse.mpds_pointSet_var_get, _deesse.mpds_pointSet_var_set)

    def __init__(self):
        _deesse.mpds_pointSet_swiginit(self, _deesse.new_mpds_pointSet())
    __swig_destroy__ = _deesse.delete_mpds_pointSet

# Register mpds_pointSet in _deesse:
_deesse.mpds_pointSet_swigregister(mpds_pointSet)


def MPDSCopyPointSet(arg1, arg2):
    return _deesse.MPDSCopyPointSet(arg1, arg2)

def MPDSFreePointSet(arg1):
    return _deesse.MPDSFreePointSet(arg1)

def MPDSGetIndexInGridForPointSet(arg1, arg2, arg3, arg4):
    return _deesse.MPDSGetIndexInGridForPointSet(arg1, arg2, arg3, arg4)

def MPDSGetPointSetInfo(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18):
    return _deesse.MPDSGetPointSetInfo(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18)

def MPDSGetXYZIndexInGridForPointSet(arg1, arg2, arg3, arg4, arg5, arg6):
    return _deesse.MPDSGetXYZIndexInGridForPointSet(arg1, arg2, arg3, arg4, arg5, arg6)

def MPDSImageToPointSet(arg1, arg2):
    return _deesse.MPDSImageToPointSet(arg1, arg2)

def MPDSInitPointSet(arg1):
    return _deesse.MPDSInitPointSet(arg1)

def MPDSMallocPointSet(arg1, arg2, arg3):
    return _deesse.MPDSMallocPointSet(arg1, arg2, arg3)

def MPDSPointSetToImage(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10):
    return _deesse.MPDSPointSetToImage(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)

def MPDSPrintPointSet(arg1, arg2, arg3):
    return _deesse.MPDSPrintPointSet(arg1, arg2, arg3)

def MPDSPrintPointSetInfo(arg1, arg2, arg3):
    return _deesse.MPDSPrintPointSetInfo(arg1, arg2, arg3)

def MPDSReadPointSet(arg1, arg2):
    return _deesse.MPDSReadPointSet(arg1, arg2)

def MPDSValidatePointSet(arg1, arg2):
    return _deesse.MPDSValidatePointSet(arg1, arg2)

def MPDSWritePointSet(arg1, arg2, arg3, arg4):
    return _deesse.MPDSWritePointSet(arg1, arg2, arg3, arg4)
MPDS_WARNING_MSG_00001 = _deesse.MPDS_WARNING_MSG_00001
MPDS_WARNING_MSG_00002 = _deesse.MPDS_WARNING_MSG_00002
MPDS_WARNING_MSG_00003 = _deesse.MPDS_WARNING_MSG_00003
MPDS_WARNING_MSG_00010 = _deesse.MPDS_WARNING_MSG_00010
MPDS_WARNING_MSG_00012 = _deesse.MPDS_WARNING_MSG_00012
MPDS_WARNING_MSG_00014 = _deesse.MPDS_WARNING_MSG_00014
MPDS_WARNING_MSG_00020 = _deesse.MPDS_WARNING_MSG_00020
MPDS_WARNING_MSG_00021 = _deesse.MPDS_WARNING_MSG_00021
MPDS_WARNING_MSG_00025 = _deesse.MPDS_WARNING_MSG_00025
MPDS_WARNING_MSG_00027 = _deesse.MPDS_WARNING_MSG_00027
MPDS_WARNING_MSG_00026 = _deesse.MPDS_WARNING_MSG_00026
MPDS_WARNING_MSG_00030 = _deesse.MPDS_WARNING_MSG_00030
MPDS_WARNING_MSG_00031 = _deesse.MPDS_WARNING_MSG_00031
MPDS_WARNING_MSG_00032 = _deesse.MPDS_WARNING_MSG_00032
MPDS_WARNING_MSG_00033 = _deesse.MPDS_WARNING_MSG_00033
MPDS_WARNING_MSG_00034 = _deesse.MPDS_WARNING_MSG_00034
MPDS_WARNING_MSG_00035 = _deesse.MPDS_WARNING_MSG_00035
MPDS_WARNING_MSG_00036 = _deesse.MPDS_WARNING_MSG_00036
MPDS_WARNING_MSG_00038 = _deesse.MPDS_WARNING_MSG_00038
MPDS_WARNING_MSG_00039 = _deesse.MPDS_WARNING_MSG_00039
MPDS_WARNING_MSG_00040 = _deesse.MPDS_WARNING_MSG_00040
MPDS_WARNING_MSG_00041 = _deesse.MPDS_WARNING_MSG_00041
MPDS_WARNING_MSG_00042 = _deesse.MPDS_WARNING_MSG_00042
MPDS_WARNING_MSG_00043 = _deesse.MPDS_WARNING_MSG_00043
MPDS_WARNING_MSG_00044 = _deesse.MPDS_WARNING_MSG_00044
MPDS_WARNING_MSG_00045 = _deesse.MPDS_WARNING_MSG_00045
MPDS_WARNING_MSG_00046 = _deesse.MPDS_WARNING_MSG_00046
MPDS_WARNING_MSG_00049 = _deesse.MPDS_WARNING_MSG_00049
MPDS_WARNING_MSG_00050 = _deesse.MPDS_WARNING_MSG_00050
MPDS_WARNING_MSG_00051 = _deesse.MPDS_WARNING_MSG_00051
MPDS_WARNING_MSG_00055 = _deesse.MPDS_WARNING_MSG_00055
MPDS_WARNING_MSG_00060 = _deesse.MPDS_WARNING_MSG_00060
MPDS_WARNING_MSG_00061 = _deesse.MPDS_WARNING_MSG_00061
MPDS_WARNING_MSG_00062 = _deesse.MPDS_WARNING_MSG_00062
MPDS_WARNING_MSG_00063 = _deesse.MPDS_WARNING_MSG_00063
MPDS_WARNING_MSG_00070 = _deesse.MPDS_WARNING_MSG_00070
MPDS_WARNING_MSG_00071 = _deesse.MPDS_WARNING_MSG_00071
MPDS_WARNING_MSG_00080 = _deesse.MPDS_WARNING_MSG_00080
MPDS_WARNING_MSG_00100 = _deesse.MPDS_WARNING_MSG_00100
MPDS_WARNING_MSG_00111 = _deesse.MPDS_WARNING_MSG_00111
MPDS_WARNING_MSG_00115 = _deesse.MPDS_WARNING_MSG_00115
MPDS_WARNING_MSG_00120 = _deesse.MPDS_WARNING_MSG_00120
MPDS_WARNING_MSG_00150 = _deesse.MPDS_WARNING_MSG_00150
MPDS_WARNING_MSG_00160 = _deesse.MPDS_WARNING_MSG_00160
MPDS_WARNING_MSG_00210 = _deesse.MPDS_WARNING_MSG_00210
MPDS_WARNING_MSG_00212 = _deesse.MPDS_WARNING_MSG_00212
MPDS_WARNING_MSG_00214 = _deesse.MPDS_WARNING_MSG_00214
MPDS_WARNING_MSG_02001 = _deesse.MPDS_WARNING_MSG_02001
MPDS_WARNING_MSG_02002 = _deesse.MPDS_WARNING_MSG_02002
MPDS_WARNING_MSG_02005 = _deesse.MPDS_WARNING_MSG_02005
MPDS_WARNING_MSG_02012 = _deesse.MPDS_WARNING_MSG_02012
MPDS_WARNING_MSG_02015 = _deesse.MPDS_WARNING_MSG_02015
MPDS_WARNING_MSG_02016 = _deesse.MPDS_WARNING_MSG_02016
MPDS_WARNING_MSG_02020 = _deesse.MPDS_WARNING_MSG_02020
MPDS_WARNING_MSG_05011 = _deesse.MPDS_WARNING_MSG_05011
MPDS_WARNING_MSG_05044 = _deesse.MPDS_WARNING_MSG_05044
MPDS_WARNING_MSG_05045 = _deesse.MPDS_WARNING_MSG_05045
MPDS_WARNING_MSG_05125 = _deesse.MPDS_WARNING_MSG_05125
MPDS_WARNING_MSG_05127 = _deesse.MPDS_WARNING_MSG_05127
MPDS_WARNING_MSG_05126 = _deesse.MPDS_WARNING_MSG_05126
MPDS_WARNING_MSG_05100 = _deesse.MPDS_WARNING_MSG_05100
MPDS_WARNING_MSG_05101 = _deesse.MPDS_WARNING_MSG_05101
MPDS_WARNING_MSG_05102 = _deesse.MPDS_WARNING_MSG_05102
MPDS_WARNING_MSG_05103 = _deesse.MPDS_WARNING_MSG_05103
MPDS_WARNING_MSG_05104 = _deesse.MPDS_WARNING_MSG_05104
MPDS_WARNING_MSG_05105 = _deesse.MPDS_WARNING_MSG_05105
MPDS_WARNING_MSG_05120 = _deesse.MPDS_WARNING_MSG_05120
MPDS_WARNING_MSG_05130 = _deesse.MPDS_WARNING_MSG_05130
MPDS_WARNING_MSG_05131 = _deesse.MPDS_WARNING_MSG_05131
MPDS_WARNING_MSG_05200 = _deesse.MPDS_WARNING_MSG_05200
MPDS_WARNING_MSG_06830 = _deesse.MPDS_WARNING_MSG_06830
MPDS_WARNING_MSG_06835 = _deesse.MPDS_WARNING_MSG_06835
MPDS_WARNING_MSG_06836 = _deesse.MPDS_WARNING_MSG_06836
MPDS_WARNING_MSG_06837 = _deesse.MPDS_WARNING_MSG_06837
MPDS_WARNING_MSG_06838 = _deesse.MPDS_WARNING_MSG_06838
MPDS_WARNING_MSG_06839 = _deesse.MPDS_WARNING_MSG_06839
MPDS_WARNING_MSG_06840 = _deesse.MPDS_WARNING_MSG_06840
MPDS_WARNING_MSG_08001 = _deesse.MPDS_WARNING_MSG_08001
MPDS_WARNING_MSG_99998 = _deesse.MPDS_WARNING_MSG_99998
MPDS_MAX_NWARNING = _deesse.MPDS_MAX_NWARNING
MPDS_SHOW_PROGRESS_MONITOR = _deesse.MPDS_SHOW_PROGRESS_MONITOR
MPDS_MAX_PROGRESS_NAME_LENGTH = _deesse.MPDS_MAX_PROGRESS_NAME_LENGTH
class mpds_progressMonitor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    progressName = property(_deesse.mpds_progressMonitor_progressName_get, _deesse.mpds_progressMonitor_progressName_set)
    warningNumber = property(_deesse.mpds_progressMonitor_warningNumber_get, _deesse.mpds_progressMonitor_warningNumber_set)
    nrealization = property(_deesse.mpds_progressMonitor_nrealization_get, _deesse.mpds_progressMonitor_nrealization_set)
    currentRealization = property(_deesse.mpds_progressMonitor_currentRealization_get, _deesse.mpds_progressMonitor_currentRealization_set)
    currentRealizationProgress = property(_deesse.mpds_progressMonitor_currentRealizationProgress_get, _deesse.mpds_progressMonitor_currentRealizationProgress_set)
    allRealizationProgress = property(_deesse.mpds_progressMonitor_allRealizationProgress_get, _deesse.mpds_progressMonitor_allRealizationProgress_set)
    abortedJobFlag = property(_deesse.mpds_progressMonitor_abortedJobFlag_get, _deesse.mpds_progressMonitor_abortedJobFlag_set)
    warningNumberList = property(_deesse.mpds_progressMonitor_warningNumberList_get, _deesse.mpds_progressMonitor_warningNumberList_set)
    nwarningNumber = property(_deesse.mpds_progressMonitor_nwarningNumber_get, _deesse.mpds_progressMonitor_nwarningNumber_set)
    nwarning = property(_deesse.mpds_progressMonitor_nwarning_get, _deesse.mpds_progressMonitor_nwarning_set)

    def __init__(self):
        _deesse.mpds_progressMonitor_swiginit(self, _deesse.new_mpds_progressMonitor())
    __swig_destroy__ = _deesse.delete_mpds_progressMonitor

# Register mpds_progressMonitor in _deesse:
_deesse.mpds_progressMonitor_swigregister(mpds_progressMonitor)


def MPDSGetWarningMessage(arg1):
    return _deesse.MPDSGetWarningMessage(arg1)

def MPDSInitProgressMonitor(arg1):
    return _deesse.MPDSInitProgressMonitor(arg1)

def MPDSUpdateProgressMonitor0(arg1):
    return _deesse.MPDSUpdateProgressMonitor0(arg1)

def MPDSUpdateProgressMonitorAllGI(arg1):
    return _deesse.MPDSUpdateProgressMonitorAllGI(arg1)

def MPDSUpdateProgressMonitorAllOnlyPercentGI(arg1):
    return _deesse.MPDSUpdateProgressMonitorAllOnlyPercentGI(arg1)

def MPDSUpdateProgressMonitorAllOnlyPercentStdout(arg1):
    return _deesse.MPDSUpdateProgressMonitorAllOnlyPercentStdout(arg1)

def MPDSUpdateProgressMonitorAllStdout(arg1):
    return _deesse.MPDSUpdateProgressMonitorAllStdout(arg1)

def MPDSUpdateProgressMonitorGI(arg1):
    return _deesse.MPDSUpdateProgressMonitorGI(arg1)

def MPDSUpdateProgressMonitorStdout(arg1):
    return _deesse.MPDSUpdateProgressMonitorStdout(arg1)

def MPDSUpdateProgressMonitorWarningOnlyGI(arg1):
    return _deesse.MPDSUpdateProgressMonitorWarningOnlyGI(arg1)

def MPDSUpdateProgressMonitorWarningOnlyStdout(arg1):
    return _deesse.MPDSUpdateProgressMonitorWarningOnlyStdout(arg1)
PYRAMID_SIM_NONE = _deesse.PYRAMID_SIM_NONE
PYRAMID_SIM_HIERARCHICAL = _deesse.PYRAMID_SIM_HIERARCHICAL
PYRAMID_SIM_HIERARCHICAL_USING_EXPANSION = _deesse.PYRAMID_SIM_HIERARCHICAL_USING_EXPANSION
PYRAMID_SIM_ALL_LEVEL_ONE_BY_ONE = _deesse.PYRAMID_SIM_ALL_LEVEL_ONE_BY_ONE
PYRAMID_NONE = _deesse.PYRAMID_NONE
PYRAMID_CONTINUOUS = _deesse.PYRAMID_CONTINUOUS
PYRAMID_CATEGORICAL_AUTO = _deesse.PYRAMID_CATEGORICAL_AUTO
PYRAMID_CATEGORICAL_CUSTOM = _deesse.PYRAMID_CATEGORICAL_CUSTOM
PYRAMID_CATEGORICAL_TO_CONTINUOUS = _deesse.PYRAMID_CATEGORICAL_TO_CONTINUOUS
class mpds_pyramidGeneralParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    npyramidLevel = property(_deesse.mpds_pyramidGeneralParameters_npyramidLevel_get, _deesse.mpds_pyramidGeneralParameters_npyramidLevel_set)
    kx = property(_deesse.mpds_pyramidGeneralParameters_kx_get, _deesse.mpds_pyramidGeneralParameters_kx_set)
    ky = property(_deesse.mpds_pyramidGeneralParameters_ky_get, _deesse.mpds_pyramidGeneralParameters_ky_set)
    kz = property(_deesse.mpds_pyramidGeneralParameters_kz_get, _deesse.mpds_pyramidGeneralParameters_kz_set)
    pyramidSimulationMode = property(_deesse.mpds_pyramidGeneralParameters_pyramidSimulationMode_get, _deesse.mpds_pyramidGeneralParameters_pyramidSimulationMode_set)
    factorNneighboringNode = property(_deesse.mpds_pyramidGeneralParameters_factorNneighboringNode_get, _deesse.mpds_pyramidGeneralParameters_factorNneighboringNode_set)
    factorDistanceThreshold = property(_deesse.mpds_pyramidGeneralParameters_factorDistanceThreshold_get, _deesse.mpds_pyramidGeneralParameters_factorDistanceThreshold_set)
    factorMaxScanFraction = property(_deesse.mpds_pyramidGeneralParameters_factorMaxScanFraction_get, _deesse.mpds_pyramidGeneralParameters_factorMaxScanFraction_set)

    def __init__(self):
        _deesse.mpds_pyramidGeneralParameters_swiginit(self, _deesse.new_mpds_pyramidGeneralParameters())
    __swig_destroy__ = _deesse.delete_mpds_pyramidGeneralParameters

# Register mpds_pyramidGeneralParameters in _deesse:
_deesse.mpds_pyramidGeneralParameters_swigregister(mpds_pyramidGeneralParameters)

class mpds_pyramidParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nlevel = property(_deesse.mpds_pyramidParameters_nlevel_get, _deesse.mpds_pyramidParameters_nlevel_set)
    pyramidType = property(_deesse.mpds_pyramidParameters_pyramidType_get, _deesse.mpds_pyramidParameters_pyramidType_set)
    classOfValues = property(_deesse.mpds_pyramidParameters_classOfValues_get, _deesse.mpds_pyramidParameters_classOfValues_set)

    def __init__(self):
        _deesse.mpds_pyramidParameters_swiginit(self, _deesse.new_mpds_pyramidParameters())
    __swig_destroy__ = _deesse.delete_mpds_pyramidParameters

# Register mpds_pyramidParameters in _deesse:
_deesse.mpds_pyramidParameters_swigregister(mpds_pyramidParameters)


def MPDSCopyPyramidGeneralParameters(arg1, arg2):
    return _deesse.MPDSCopyPyramidGeneralParameters(arg1, arg2)

def MPDSCopyPyramidParameters(arg1, arg2):
    return _deesse.MPDSCopyPyramidParameters(arg1, arg2)

def MPDSFreePyramidGeneralParameters(arg1):
    return _deesse.MPDSFreePyramidGeneralParameters(arg1)

def MPDSFreePyramidParameters(arg1):
    return _deesse.MPDSFreePyramidParameters(arg1)

def MPDSInitPyramidGeneralParameters(arg1):
    return _deesse.MPDSInitPyramidGeneralParameters(arg1)

def MPDSInitPyramidParameters(arg1):
    return _deesse.MPDSInitPyramidParameters(arg1)

def MPDSPrintPyramidGeneralParameters(arg1, arg2, arg3):
    return _deesse.MPDSPrintPyramidGeneralParameters(arg1, arg2, arg3)

def MPDSPrintPyramidParameters(arg1, arg2, arg3):
    return _deesse.MPDSPrintPyramidParameters(arg1, arg2, arg3)

def MPDSReadPyramidParameters(arg1, arg2):
    return _deesse.MPDSReadPyramidParameters(arg1, arg2)

def MPDSValidatePyramidGeneralParameters(arg1, arg2, arg3, arg4):
    return _deesse.MPDSValidatePyramidGeneralParameters(arg1, arg2, arg3, arg4)

def MPDSValidatePyramidParameters(arg1, arg2, arg3, arg4):
    return _deesse.MPDSValidatePyramidParameters(arg1, arg2, arg3, arg4)
SEARCHNEIGHBORHOOD_RADIUS_LARGE_DEFAULT = _deesse.SEARCHNEIGHBORHOOD_RADIUS_LARGE_DEFAULT
SEARCHNEIGHBORHOOD_RADIUS_TI_RANGE_DEFAULT = _deesse.SEARCHNEIGHBORHOOD_RADIUS_TI_RANGE_DEFAULT
SEARCHNEIGHBORHOOD_RADIUS_TI_RANGE = _deesse.SEARCHNEIGHBORHOOD_RADIUS_TI_RANGE
SEARCHNEIGHBORHOOD_RADIUS_TI_RANGE_XY = _deesse.SEARCHNEIGHBORHOOD_RADIUS_TI_RANGE_XY
SEARCHNEIGHBORHOOD_RADIUS_TI_RANGE_XZ = _deesse.SEARCHNEIGHBORHOOD_RADIUS_TI_RANGE_XZ
SEARCHNEIGHBORHOOD_RADIUS_TI_RANGE_YZ = _deesse.SEARCHNEIGHBORHOOD_RADIUS_TI_RANGE_YZ
SEARCHNEIGHBORHOOD_RADIUS_TI_RANGE_XYZ = _deesse.SEARCHNEIGHBORHOOD_RADIUS_TI_RANGE_XYZ
SEARCHNEIGHBORHOOD_RADIUS_MANUAL = _deesse.SEARCHNEIGHBORHOOD_RADIUS_MANUAL
SEARCHNEIGHBORHOOD_ANISOTROPY_RATIO_ONE = _deesse.SEARCHNEIGHBORHOOD_ANISOTROPY_RATIO_ONE
SEARCHNEIGHBORHOOD_ANISOTROPY_RATIO_RADIUS = _deesse.SEARCHNEIGHBORHOOD_ANISOTROPY_RATIO_RADIUS
SEARCHNEIGHBORHOOD_ANISOTROPY_RATIO_RADIUS_XY = _deesse.SEARCHNEIGHBORHOOD_ANISOTROPY_RATIO_RADIUS_XY
SEARCHNEIGHBORHOOD_ANISOTROPY_RATIO_RADIUS_XZ = _deesse.SEARCHNEIGHBORHOOD_ANISOTROPY_RATIO_RADIUS_XZ
SEARCHNEIGHBORHOOD_ANISOTROPY_RATIO_RADIUS_YZ = _deesse.SEARCHNEIGHBORHOOD_ANISOTROPY_RATIO_RADIUS_YZ
SEARCHNEIGHBORHOOD_ANISOTROPY_RATIO_RADIUS_XYZ = _deesse.SEARCHNEIGHBORHOOD_ANISOTROPY_RATIO_RADIUS_XYZ
SEARCHNEIGHBORHOOD_ANISOTROPY_RATIO_MANUAL = _deesse.SEARCHNEIGHBORHOOD_ANISOTROPY_RATIO_MANUAL
class mpds_searchNeighborhoodParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    radiusMode = property(_deesse.mpds_searchNeighborhoodParameters_radiusMode_get, _deesse.mpds_searchNeighborhoodParameters_radiusMode_set)
    rx = property(_deesse.mpds_searchNeighborhoodParameters_rx_get, _deesse.mpds_searchNeighborhoodParameters_rx_set)
    ry = property(_deesse.mpds_searchNeighborhoodParameters_ry_get, _deesse.mpds_searchNeighborhoodParameters_ry_set)
    rz = property(_deesse.mpds_searchNeighborhoodParameters_rz_get, _deesse.mpds_searchNeighborhoodParameters_rz_set)
    anisotropyRatioMode = property(_deesse.mpds_searchNeighborhoodParameters_anisotropyRatioMode_get, _deesse.mpds_searchNeighborhoodParameters_anisotropyRatioMode_set)
    ax = property(_deesse.mpds_searchNeighborhoodParameters_ax_get, _deesse.mpds_searchNeighborhoodParameters_ax_set)
    ay = property(_deesse.mpds_searchNeighborhoodParameters_ay_get, _deesse.mpds_searchNeighborhoodParameters_ay_set)
    az = property(_deesse.mpds_searchNeighborhoodParameters_az_get, _deesse.mpds_searchNeighborhoodParameters_az_set)
    rotationFlag = property(_deesse.mpds_searchNeighborhoodParameters_rotationFlag_get, _deesse.mpds_searchNeighborhoodParameters_rotationFlag_set)
    angle1 = property(_deesse.mpds_searchNeighborhoodParameters_angle1_get, _deesse.mpds_searchNeighborhoodParameters_angle1_set)
    angle2 = property(_deesse.mpds_searchNeighborhoodParameters_angle2_get, _deesse.mpds_searchNeighborhoodParameters_angle2_set)
    angle3 = property(_deesse.mpds_searchNeighborhoodParameters_angle3_get, _deesse.mpds_searchNeighborhoodParameters_angle3_set)
    power = property(_deesse.mpds_searchNeighborhoodParameters_power_get, _deesse.mpds_searchNeighborhoodParameters_power_set)

    def __init__(self):
        _deesse.mpds_searchNeighborhoodParameters_swiginit(self, _deesse.new_mpds_searchNeighborhoodParameters())
    __swig_destroy__ = _deesse.delete_mpds_searchNeighborhoodParameters

# Register mpds_searchNeighborhoodParameters in _deesse:
_deesse.mpds_searchNeighborhoodParameters_swigregister(mpds_searchNeighborhoodParameters)

class mpds_searchNeighborhood(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    size = property(_deesse.mpds_searchNeighborhood_size_get, _deesse.mpds_searchNeighborhood_size_set)
    ix = property(_deesse.mpds_searchNeighborhood_ix_get, _deesse.mpds_searchNeighborhood_ix_set)
    iy = property(_deesse.mpds_searchNeighborhood_iy_get, _deesse.mpds_searchNeighborhood_iy_set)
    iz = property(_deesse.mpds_searchNeighborhood_iz_get, _deesse.mpds_searchNeighborhood_iz_set)
    distance = property(_deesse.mpds_searchNeighborhood_distance_get, _deesse.mpds_searchNeighborhood_distance_set)
    weight = property(_deesse.mpds_searchNeighborhood_weight_get, _deesse.mpds_searchNeighborhood_weight_set)
    ixMin = property(_deesse.mpds_searchNeighborhood_ixMin_get, _deesse.mpds_searchNeighborhood_ixMin_set)
    iyMin = property(_deesse.mpds_searchNeighborhood_iyMin_get, _deesse.mpds_searchNeighborhood_iyMin_set)
    izMin = property(_deesse.mpds_searchNeighborhood_izMin_get, _deesse.mpds_searchNeighborhood_izMin_set)
    ixMax = property(_deesse.mpds_searchNeighborhood_ixMax_get, _deesse.mpds_searchNeighborhood_ixMax_set)
    iyMax = property(_deesse.mpds_searchNeighborhood_iyMax_get, _deesse.mpds_searchNeighborhood_iyMax_set)
    izMax = property(_deesse.mpds_searchNeighborhood_izMax_get, _deesse.mpds_searchNeighborhood_izMax_set)

    def __init__(self):
        _deesse.mpds_searchNeighborhood_swiginit(self, _deesse.new_mpds_searchNeighborhood())
    __swig_destroy__ = _deesse.delete_mpds_searchNeighborhood

# Register mpds_searchNeighborhood in _deesse:
_deesse.mpds_searchNeighborhood_swigregister(mpds_searchNeighborhood)


def MPDSBuildSearchNeighborhood(arg1, arg2, arg3):
    return _deesse.MPDSBuildSearchNeighborhood(arg1, arg2, arg3)

def MPDSCmpSearchNeighborhoodParameters(arg1, arg2):
    return _deesse.MPDSCmpSearchNeighborhoodParameters(arg1, arg2)

def MPDSFreeSearchNeighborhood(arg1):
    return _deesse.MPDSFreeSearchNeighborhood(arg1)

def MPDSInitSearchNeighborhood(arg1):
    return _deesse.MPDSInitSearchNeighborhood(arg1)

def MPDSInitSearchNeighborhoodParameters(arg1):
    return _deesse.MPDSInitSearchNeighborhoodParameters(arg1)

def MPDSMallocSearchNeighborhood(arg1, arg2):
    return _deesse.MPDSMallocSearchNeighborhood(arg1, arg2)

def MPDSPrintSearchNeighborhood(arg1, arg2, arg3):
    return _deesse.MPDSPrintSearchNeighborhood(arg1, arg2, arg3)

def MPDSPrintSearchNeighborhoodParameters(arg1, arg2, arg3):
    return _deesse.MPDSPrintSearchNeighborhoodParameters(arg1, arg2, arg3)

def MPDSReadSearchNeighborhoodParameters(arg1, arg2, arg3):
    return _deesse.MPDSReadSearchNeighborhoodParameters(arg1, arg2, arg3)

def MPDSReallocSearchNeighborhood(arg1, arg2):
    return _deesse.MPDSReallocSearchNeighborhood(arg1, arg2)

def MPDSSearchNeighborhoodToImage(arg1, arg2):
    return _deesse.MPDSSearchNeighborhoodToImage(arg1, arg2)

def MPDSSearchNeighborhoodApproxBound(arg1, arg2, arg3, arg4):
    return _deesse.MPDSSearchNeighborhoodApproxBound(arg1, arg2, arg3, arg4)

def MPDSValidateSearchNeighborhoodParameters(arg1, arg2):
    return _deesse.MPDSValidateSearchNeighborhoodParameters(arg1, arg2)

def MPDSSim(arg1, arg2, arg3, arg4):
    return _deesse.MPDSSim(arg1, arg2, arg3, arg4)

def MPDSSimComputePyramid(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45):
    return _deesse.MPDSSimComputePyramid(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45)

def MPDSSimComputePyramidInitialSim(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20):
    return _deesse.MPDSSimComputePyramidInitialSim(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20)

def MPDSSimComputePyramidNvar(arg1, arg2, arg3, arg4, arg5):
    return _deesse.MPDSSimComputePyramidNvar(arg1, arg2, arg3, arg4, arg5)

def MPDSSimConnectivityAddConditioningData(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17):
    return _deesse.MPDSSimConnectivityAddConditioningData(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17)

def MPDSSimConnectivitySortGroup(arg1, arg2, arg3, arg4, arg5, arg6):
    return _deesse.MPDSSimConnectivitySortGroup(arg1, arg2, arg3, arg4, arg5, arg6)

def MPDSSimGetTIMeasures(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12):
    return _deesse.MPDSSimGetTIMeasures(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)

def MPDSSimIntegrateConditioningData(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _deesse.MPDSSimIntegrateConditioningData(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

def MPDSSimIntegrateConditioningDataWithConnectivity(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12):
    return _deesse.MPDSSimIntegrateConditioningDataWithConnectivity(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)

def MPDSSimOneReal(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67, arg68, arg69, arg70, arg71, arg72, arg73):
    return _deesse.MPDSSimOneReal(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67, arg68, arg69, arg70, arg71, arg72, arg73)

def MPDSSimOneRealWithVariableTransform(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67, arg68, arg69, arg70, arg71, arg72, arg73):
    return _deesse.MPDSSimOneRealWithVariableTransform(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67, arg68, arg69, arg70, arg71, arg72, arg73)

def MPDSSimPrepareBlockData(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19):
    return _deesse.MPDSSimPrepareBlockData(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19)

def MPDSSimPrepareBlockDataInitialSim(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _deesse.MPDSSimPrepareBlockDataInitialSim(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)

def MPDSSimPrepareConnectivityRefImage(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _deesse.MPDSSimPrepareConnectivityRefImage(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)

def MPDSSimPrepareConnectivitySimImage(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15):
    return _deesse.MPDSSimPrepareConnectivitySimImage(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15)

def MPDSSimPrepareData(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16):
    return _deesse.MPDSSimPrepareData(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16)

def MPDSSimPrepareOutput(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12):
    return _deesse.MPDSSimPrepareOutput(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)

def MPDSSimPrepareSearchNeighborhood(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13):
    return _deesse.MPDSSimPrepareSearchNeighborhood(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)

def MPDSSimPrepareSearchNeighborhoodPyramid(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19):
    return _deesse.MPDSSimPrepareSearchNeighborhoodPyramid(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19)

def MPDSSimPrepareSimulationParametersPyramid(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41):
    return _deesse.MPDSSimPrepareSimulationParametersPyramid(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41)

def MPDSSimPrepareSimulationPath(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12):
    return _deesse.MPDSSimPrepareSimulationPath(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)

def MPDSSimPrepareSimulationPathPyramid(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23):
    return _deesse.MPDSSimPrepareSimulationPathPyramid(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23)

def MPDSSimPrepareSoftProbability(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14):
    return _deesse.MPDSSimPrepareSoftProbability(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)

def MPDSSimPrepareSoftProbabilityInitialSim(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _deesse.MPDSSimPrepareSoftProbabilityInitialSim(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def MPDSSimPyramid(arg1, arg2, arg3, arg4, arg5):
    return _deesse.MPDSSimPyramid(arg1, arg2, arg3, arg4, arg5)

def MPDSSimStandard(arg1, arg2, arg3, arg4, arg5):
    return _deesse.MPDSSimStandard(arg1, arg2, arg3, arg4, arg5)

def MPDSSimPyramidAllLevelOneByOne(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67, arg68, arg69, arg70, arg71, arg72, arg73, arg74, arg75, arg76, arg77):
    return _deesse.MPDSSimPyramidAllLevelOneByOne(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67, arg68, arg69, arg70, arg71, arg72, arg73, arg74, arg75, arg76, arg77)

def MPDSSimPyramidAllLevelOneByOneWithVariableTransform(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67, arg68, arg69, arg70, arg71, arg72, arg73, arg74, arg75, arg76, arg77):
    return _deesse.MPDSSimPyramidAllLevelOneByOneWithVariableTransform(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67, arg68, arg69, arg70, arg71, arg72, arg73, arg74, arg75, arg76, arg77)

def MPDSSimPyramidLevelCondToCoarse(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67, arg68, arg69, arg70, arg71, arg72, arg73, arg74, arg75, arg76, arg77, arg78, arg79, arg80, arg81, arg82, arg83, arg84, arg85, arg86, arg87, arg88, arg89, arg90, arg91, arg92, arg93, arg94, arg95, arg96, arg97, arg98, arg99, arg100, arg101):
    return _deesse.MPDSSimPyramidLevelCondToCoarse(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67, arg68, arg69, arg70, arg71, arg72, arg73, arg74, arg75, arg76, arg77, arg78, arg79, arg80, arg81, arg82, arg83, arg84, arg85, arg86, arg87, arg88, arg89, arg90, arg91, arg92, arg93, arg94, arg95, arg96, arg97, arg98, arg99, arg100, arg101)

def MPDSSimPyramidLevelCondToCoarseWithVariableTransform(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67, arg68, arg69, arg70, arg71, arg72, arg73, arg74, arg75, arg76, arg77, arg78, arg79, arg80, arg81, arg82, arg83, arg84, arg85, arg86, arg87, arg88, arg89, arg90, arg91, arg92, arg93, arg94, arg95, arg96, arg97, arg98, arg99, arg100, arg101):
    return _deesse.MPDSSimPyramidLevelCondToCoarseWithVariableTransform(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67, arg68, arg69, arg70, arg71, arg72, arg73, arg74, arg75, arg76, arg77, arg78, arg79, arg80, arg81, arg82, arg83, arg84, arg85, arg86, arg87, arg88, arg89, arg90, arg91, arg92, arg93, arg94, arg95, arg96, arg97, arg98, arg99, arg100, arg101)

def MPDSSimPyramidLevelCondToFine(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67, arg68, arg69, arg70, arg71, arg72, arg73, arg74, arg75, arg76, arg77, arg78, arg79, arg80, arg81, arg82, arg83, arg84, arg85, arg86, arg87, arg88, arg89, arg90, arg91, arg92, arg93, arg94, arg95, arg96, arg97, arg98):
    return _deesse.MPDSSimPyramidLevelCondToFine(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67, arg68, arg69, arg70, arg71, arg72, arg73, arg74, arg75, arg76, arg77, arg78, arg79, arg80, arg81, arg82, arg83, arg84, arg85, arg86, arg87, arg88, arg89, arg90, arg91, arg92, arg93, arg94, arg95, arg96, arg97, arg98)

def MPDSSimPyramidLevelCondToFineWithVariableTransform(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67, arg68, arg69, arg70, arg71, arg72, arg73, arg74, arg75, arg76, arg77, arg78, arg79, arg80, arg81, arg82, arg83, arg84, arg85, arg86, arg87, arg88, arg89, arg90, arg91, arg92, arg93, arg94, arg95, arg96, arg97, arg98):
    return _deesse.MPDSSimPyramidLevelCondToFineWithVariableTransform(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67, arg68, arg69, arg70, arg71, arg72, arg73, arg74, arg75, arg76, arg77, arg78, arg79, arg80, arg81, arg82, arg83, arg84, arg85, arg86, arg87, arg88, arg89, arg90, arg91, arg92, arg93, arg94, arg95, arg96, arg97, arg98)

def MPDSSimPyramidSingleLevel(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67):
    return _deesse.MPDSSimPyramidSingleLevel(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67)

def MPDSSimPyramidSingleLevelWithVariableTransform(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67):
    return _deesse.MPDSSimPyramidSingleLevelWithVariableTransform(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67)

def MPDSSimTransformHomothetyImage(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _deesse.MPDSSimTransformHomothetyImage(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def MPDSSimTransformHomothetyValue(arg1, arg2, arg3, arg4, arg5, arg6):
    return _deesse.MPDSSimTransformHomothetyValue(arg1, arg2, arg3, arg4, arg5, arg6)

def MPDSSimTransformRotationImage(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _deesse.MPDSSimTransformRotationImage(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def MPDSSimTransformRotationValue(arg1, arg2, arg3, arg4, arg5, arg6):
    return _deesse.MPDSSimTransformRotationValue(arg1, arg2, arg3, arg4, arg5, arg6)
SIM_ONE_BY_ONE = _deesse.SIM_ONE_BY_ONE
SIM_VARIABLE_VECTOR = _deesse.SIM_VARIABLE_VECTOR
PATH_RANDOM = _deesse.PATH_RANDOM
PATH_RANDOM_HD_DISTANCE_PDF = _deesse.PATH_RANDOM_HD_DISTANCE_PDF
PATH_RANDOM_HD_DISTANCE_SORT = _deesse.PATH_RANDOM_HD_DISTANCE_SORT
PATH_RANDOM_HD_DISTANCE_SUM_PDF = _deesse.PATH_RANDOM_HD_DISTANCE_SUM_PDF
PATH_RANDOM_HD_DISTANCE_SUM_SORT = _deesse.PATH_RANDOM_HD_DISTANCE_SUM_SORT
PATH_UNILATERAL = _deesse.PATH_UNILATERAL
class mpds_simAndPathParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    simType = property(_deesse.mpds_simAndPathParameters_simType_get, _deesse.mpds_simAndPathParameters_simType_set)
    pathType = property(_deesse.mpds_simAndPathParameters_pathType_get, _deesse.mpds_simAndPathParameters_pathType_set)
    unilateralOrderLength = property(_deesse.mpds_simAndPathParameters_unilateralOrderLength_get, _deesse.mpds_simAndPathParameters_unilateralOrderLength_set)
    unilateralOrder = property(_deesse.mpds_simAndPathParameters_unilateralOrder_get, _deesse.mpds_simAndPathParameters_unilateralOrder_set)
    strength = property(_deesse.mpds_simAndPathParameters_strength_get, _deesse.mpds_simAndPathParameters_strength_set)
    pow = property(_deesse.mpds_simAndPathParameters_pow_get, _deesse.mpds_simAndPathParameters_pow_set)

    def __init__(self):
        _deesse.mpds_simAndPathParameters_swiginit(self, _deesse.new_mpds_simAndPathParameters())
    __swig_destroy__ = _deesse.delete_mpds_simAndPathParameters

# Register mpds_simAndPathParameters in _deesse:
_deesse.mpds_simAndPathParameters_swigregister(mpds_simAndPathParameters)


def MPDSCopySimAndPathParameters(arg1, arg2):
    return _deesse.MPDSCopySimAndPathParameters(arg1, arg2)

def MPDSFreeSimAndPathParameters(arg1):
    return _deesse.MPDSFreeSimAndPathParameters(arg1)

def MPDSInitSimAndPathParameters(arg1):
    return _deesse.MPDSInitSimAndPathParameters(arg1)

def MPDSPathDistancePdfRandom(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12):
    return _deesse.MPDSPathDistancePdfRandom(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)

def MPDSPathDistanceSortRandom(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12):
    return _deesse.MPDSPathDistanceSortRandom(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)

def MPDSPathDistanceSumPdfRandom(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13):
    return _deesse.MPDSPathDistanceSumPdfRandom(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)

def MPDSPathDistanceSumSortRandom(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13):
    return _deesse.MPDSPathDistanceSumSortRandom(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)

def MPDSPathRandom(arg1, arg2, arg3):
    return _deesse.MPDSPathRandom(arg1, arg2, arg3)

def MPDSPathUnilateral3D(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _deesse.MPDSPathUnilateral3D(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def MPDSPathUnilateral4D(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _deesse.MPDSPathUnilateral4D(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

def MPDSPrintSimAndPathParameters(arg1, arg2, arg3):
    return _deesse.MPDSPrintSimAndPathParameters(arg1, arg2, arg3)

def MPDSReadSimAndPathParameters(arg1, arg2):
    return _deesse.MPDSReadSimAndPathParameters(arg1, arg2)

def MPDSValidateSimAndPathParameters(arg1, arg2):
    return _deesse.MPDSValidateSimAndPathParameters(arg1, arg2)

def MPDSVectorPathDistancePdfRandom(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12):
    return _deesse.MPDSVectorPathDistancePdfRandom(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)

def MPDSVectorPathDistanceSortRandom(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12):
    return _deesse.MPDSVectorPathDistanceSortRandom(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)

def MPDSVectorPathDistanceSumPdfRandom(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13):
    return _deesse.MPDSVectorPathDistanceSumPdfRandom(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)

def MPDSVectorPathDistanceSumSortRandom(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13):
    return _deesse.MPDSVectorPathDistanceSumSortRandom(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)
OUTPUT_SIM_NO_FILE = _deesse.OUTPUT_SIM_NO_FILE
OUTPUT_SIM_ALL_IN_ONE_FILE = _deesse.OUTPUT_SIM_ALL_IN_ONE_FILE
OUTPUT_SIM_ONE_FILE_PER_VARIABLE = _deesse.OUTPUT_SIM_ONE_FILE_PER_VARIABLE
OUTPUT_SIM_ONE_FILE_PER_REALIZATION = _deesse.OUTPUT_SIM_ONE_FILE_PER_REALIZATION
NORMALIZING_LINEAR = _deesse.NORMALIZING_LINEAR
NORMALIZING_UNIFORM = _deesse.NORMALIZING_UNIFORM
NORMALIZING_NORMAL = _deesse.NORMALIZING_NORMAL
RESCALING_NONE = _deesse.RESCALING_NONE
RESCALING_MIN_MAX = _deesse.RESCALING_MIN_MAX
RESCALING_MEAN_LENGTH = _deesse.RESCALING_MEAN_LENGTH
class mpds_simInput(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    consoleAppFlag = property(_deesse.mpds_simInput_consoleAppFlag_get, _deesse.mpds_simInput_consoleAppFlag_set)
    simName = property(_deesse.mpds_simInput_simName_get, _deesse.mpds_simInput_simName_set)
    simImage = property(_deesse.mpds_simInput_simImage_get, _deesse.mpds_simInput_simImage_set)
    nvar = property(_deesse.mpds_simInput_nvar_get, _deesse.mpds_simInput_nvar_set)
    outputVarFlag = property(_deesse.mpds_simInput_outputVarFlag_get, _deesse.mpds_simInput_outputVarFlag_set)
    formatStringVar = property(_deesse.mpds_simInput_formatStringVar_get, _deesse.mpds_simInput_formatStringVar_set)
    outputSimJob = property(_deesse.mpds_simInput_outputSimJob_get, _deesse.mpds_simInput_outputSimJob_set)
    outputSimImageFileName = property(_deesse.mpds_simInput_outputSimImageFileName_get, _deesse.mpds_simInput_outputSimImageFileName_set)
    outputPathIndexFlag = property(_deesse.mpds_simInput_outputPathIndexFlag_get, _deesse.mpds_simInput_outputPathIndexFlag_set)
    outputPathIndexFileName = property(_deesse.mpds_simInput_outputPathIndexFileName_get, _deesse.mpds_simInput_outputPathIndexFileName_set)
    outputErrorFlag = property(_deesse.mpds_simInput_outputErrorFlag_get, _deesse.mpds_simInput_outputErrorFlag_set)
    outputErrorFileName = property(_deesse.mpds_simInput_outputErrorFileName_get, _deesse.mpds_simInput_outputErrorFileName_set)
    outputTiGridNodeIndexFlag = property(_deesse.mpds_simInput_outputTiGridNodeIndexFlag_get, _deesse.mpds_simInput_outputTiGridNodeIndexFlag_set)
    outputTiGridNodeIndexFileName = property(_deesse.mpds_simInput_outputTiGridNodeIndexFileName_get, _deesse.mpds_simInput_outputTiGridNodeIndexFileName_set)
    outputTiIndexFlag = property(_deesse.mpds_simInput_outputTiIndexFlag_get, _deesse.mpds_simInput_outputTiIndexFlag_set)
    outputTiIndexFileName = property(_deesse.mpds_simInput_outputTiIndexFileName_get, _deesse.mpds_simInput_outputTiIndexFileName_set)
    outputReportFlag = property(_deesse.mpds_simInput_outputReportFlag_get, _deesse.mpds_simInput_outputReportFlag_set)
    outputReportFileName = property(_deesse.mpds_simInput_outputReportFileName_get, _deesse.mpds_simInput_outputReportFileName_set)
    ntrainImage = property(_deesse.mpds_simInput_ntrainImage_get, _deesse.mpds_simInput_ntrainImage_set)
    simGridAsTiFlag = property(_deesse.mpds_simInput_simGridAsTiFlag_get, _deesse.mpds_simInput_simGridAsTiFlag_set)
    trainImage = property(_deesse.mpds_simInput_trainImage_get, _deesse.mpds_simInput_trainImage_set)
    pdfTrainImage = property(_deesse.mpds_simInput_pdfTrainImage_get, _deesse.mpds_simInput_pdfTrainImage_set)
    ndataImage = property(_deesse.mpds_simInput_ndataImage_get, _deesse.mpds_simInput_ndataImage_set)
    dataImage = property(_deesse.mpds_simInput_dataImage_get, _deesse.mpds_simInput_dataImage_set)
    ndataPointSet = property(_deesse.mpds_simInput_ndataPointSet_get, _deesse.mpds_simInput_ndataPointSet_set)
    dataPointSet = property(_deesse.mpds_simInput_dataPointSet_get, _deesse.mpds_simInput_dataPointSet_set)
    maskImageFlag = property(_deesse.mpds_simInput_maskImageFlag_get, _deesse.mpds_simInput_maskImageFlag_set)
    maskImage = property(_deesse.mpds_simInput_maskImage_get, _deesse.mpds_simInput_maskImage_set)
    homothetyUsage = property(_deesse.mpds_simInput_homothetyUsage_get, _deesse.mpds_simInput_homothetyUsage_set)
    homothetyXRatioImageFlag = property(_deesse.mpds_simInput_homothetyXRatioImageFlag_get, _deesse.mpds_simInput_homothetyXRatioImageFlag_set)
    homothetyYRatioImageFlag = property(_deesse.mpds_simInput_homothetyYRatioImageFlag_get, _deesse.mpds_simInput_homothetyYRatioImageFlag_set)
    homothetyZRatioImageFlag = property(_deesse.mpds_simInput_homothetyZRatioImageFlag_get, _deesse.mpds_simInput_homothetyZRatioImageFlag_set)
    homothetyXRatioValue = property(_deesse.mpds_simInput_homothetyXRatioValue_get, _deesse.mpds_simInput_homothetyXRatioValue_set)
    homothetyYRatioValue = property(_deesse.mpds_simInput_homothetyYRatioValue_get, _deesse.mpds_simInput_homothetyYRatioValue_set)
    homothetyZRatioValue = property(_deesse.mpds_simInput_homothetyZRatioValue_get, _deesse.mpds_simInput_homothetyZRatioValue_set)
    homothetyXRatioImage = property(_deesse.mpds_simInput_homothetyXRatioImage_get, _deesse.mpds_simInput_homothetyXRatioImage_set)
    homothetyYRatioImage = property(_deesse.mpds_simInput_homothetyYRatioImage_get, _deesse.mpds_simInput_homothetyYRatioImage_set)
    homothetyZRatioImage = property(_deesse.mpds_simInput_homothetyZRatioImage_get, _deesse.mpds_simInput_homothetyZRatioImage_set)
    rotationUsage = property(_deesse.mpds_simInput_rotationUsage_get, _deesse.mpds_simInput_rotationUsage_set)
    rotationAzimuthImageFlag = property(_deesse.mpds_simInput_rotationAzimuthImageFlag_get, _deesse.mpds_simInput_rotationAzimuthImageFlag_set)
    rotationDipImageFlag = property(_deesse.mpds_simInput_rotationDipImageFlag_get, _deesse.mpds_simInput_rotationDipImageFlag_set)
    rotationPlungeImageFlag = property(_deesse.mpds_simInput_rotationPlungeImageFlag_get, _deesse.mpds_simInput_rotationPlungeImageFlag_set)
    rotationAzimuthValue = property(_deesse.mpds_simInput_rotationAzimuthValue_get, _deesse.mpds_simInput_rotationAzimuthValue_set)
    rotationDipValue = property(_deesse.mpds_simInput_rotationDipValue_get, _deesse.mpds_simInput_rotationDipValue_set)
    rotationPlungeValue = property(_deesse.mpds_simInput_rotationPlungeValue_get, _deesse.mpds_simInput_rotationPlungeValue_set)
    rotationAzimuthImage = property(_deesse.mpds_simInput_rotationAzimuthImage_get, _deesse.mpds_simInput_rotationAzimuthImage_set)
    rotationDipImage = property(_deesse.mpds_simInput_rotationDipImage_get, _deesse.mpds_simInput_rotationDipImage_set)
    rotationPlungeImage = property(_deesse.mpds_simInput_rotationPlungeImage_get, _deesse.mpds_simInput_rotationPlungeImage_set)
    trainValueRangeExtensionMax = property(_deesse.mpds_simInput_trainValueRangeExtensionMax_get, _deesse.mpds_simInput_trainValueRangeExtensionMax_set)
    normalizingType = property(_deesse.mpds_simInput_normalizingType_get, _deesse.mpds_simInput_normalizingType_set)
    searchNeighborhoodParameters = property(_deesse.mpds_simInput_searchNeighborhoodParameters_get, _deesse.mpds_simInput_searchNeighborhoodParameters_set)
    nneighboringNode = property(_deesse.mpds_simInput_nneighboringNode_get, _deesse.mpds_simInput_nneighboringNode_set)
    maxPropInequalityNode = property(_deesse.mpds_simInput_maxPropInequalityNode_get, _deesse.mpds_simInput_maxPropInequalityNode_set)
    neighboringNodeDensity = property(_deesse.mpds_simInput_neighboringNodeDensity_get, _deesse.mpds_simInput_neighboringNodeDensity_set)
    rescalingMode = property(_deesse.mpds_simInput_rescalingMode_get, _deesse.mpds_simInput_rescalingMode_set)
    rescalingTargetMin = property(_deesse.mpds_simInput_rescalingTargetMin_get, _deesse.mpds_simInput_rescalingTargetMin_set)
    rescalingTargetMax = property(_deesse.mpds_simInput_rescalingTargetMax_get, _deesse.mpds_simInput_rescalingTargetMax_set)
    rescalingTargetMean = property(_deesse.mpds_simInput_rescalingTargetMean_get, _deesse.mpds_simInput_rescalingTargetMean_set)
    rescalingTargetLength = property(_deesse.mpds_simInput_rescalingTargetLength_get, _deesse.mpds_simInput_rescalingTargetLength_set)
    relativeDistanceFlag = property(_deesse.mpds_simInput_relativeDistanceFlag_get, _deesse.mpds_simInput_relativeDistanceFlag_set)
    distanceType = property(_deesse.mpds_simInput_distanceType_get, _deesse.mpds_simInput_distanceType_set)
    powerLpDistance = property(_deesse.mpds_simInput_powerLpDistance_get, _deesse.mpds_simInput_powerLpDistance_set)
    powerLpDistanceInv = property(_deesse.mpds_simInput_powerLpDistanceInv_get, _deesse.mpds_simInput_powerLpDistanceInv_set)
    conditioningWeightFactor = property(_deesse.mpds_simInput_conditioningWeightFactor_get, _deesse.mpds_simInput_conditioningWeightFactor_set)
    simAndPathParameters = property(_deesse.mpds_simInput_simAndPathParameters_get, _deesse.mpds_simInput_simAndPathParameters_set)
    distanceThreshold = property(_deesse.mpds_simInput_distanceThreshold_get, _deesse.mpds_simInput_distanceThreshold_set)
    softProbability = property(_deesse.mpds_simInput_softProbability_get, _deesse.mpds_simInput_softProbability_set)
    connectivity = property(_deesse.mpds_simInput_connectivity_get, _deesse.mpds_simInput_connectivity_set)
    blockData = property(_deesse.mpds_simInput_blockData_get, _deesse.mpds_simInput_blockData_set)
    maxScanFraction = property(_deesse.mpds_simInput_maxScanFraction_get, _deesse.mpds_simInput_maxScanFraction_set)
    pyramidGeneralParameters = property(_deesse.mpds_simInput_pyramidGeneralParameters_get, _deesse.mpds_simInput_pyramidGeneralParameters_set)
    pyramidParameters = property(_deesse.mpds_simInput_pyramidParameters_get, _deesse.mpds_simInput_pyramidParameters_set)
    tolerance = property(_deesse.mpds_simInput_tolerance_get, _deesse.mpds_simInput_tolerance_set)
    npostProcessingPathMax = property(_deesse.mpds_simInput_npostProcessingPathMax_get, _deesse.mpds_simInput_npostProcessingPathMax_set)
    postProcessingNneighboringNode = property(_deesse.mpds_simInput_postProcessingNneighboringNode_get, _deesse.mpds_simInput_postProcessingNneighboringNode_set)
    postProcessingNeighboringNodeDensity = property(_deesse.mpds_simInput_postProcessingNeighboringNodeDensity_get, _deesse.mpds_simInput_postProcessingNeighboringNodeDensity_set)
    postProcessingDistanceThreshold = property(_deesse.mpds_simInput_postProcessingDistanceThreshold_get, _deesse.mpds_simInput_postProcessingDistanceThreshold_set)
    postProcessingMaxScanFraction = property(_deesse.mpds_simInput_postProcessingMaxScanFraction_get, _deesse.mpds_simInput_postProcessingMaxScanFraction_set)
    postProcessingTolerance = property(_deesse.mpds_simInput_postProcessingTolerance_get, _deesse.mpds_simInput_postProcessingTolerance_set)
    seed = property(_deesse.mpds_simInput_seed_get, _deesse.mpds_simInput_seed_set)
    seedIncrement = property(_deesse.mpds_simInput_seedIncrement_get, _deesse.mpds_simInput_seedIncrement_set)
    nrealization = property(_deesse.mpds_simInput_nrealization_get, _deesse.mpds_simInput_nrealization_set)

    def __init__(self):
        _deesse.mpds_simInput_swiginit(self, _deesse.new_mpds_simInput())
    __swig_destroy__ = _deesse.delete_mpds_simInput

# Register mpds_simInput in _deesse:
_deesse.mpds_simInput_swigregister(mpds_simInput)


def MPDSExportSimInput(arg1, arg2, arg3, arg4, arg5):
    return _deesse.MPDSExportSimInput(arg1, arg2, arg3, arg4, arg5)

def MPDSFreeSimInput(arg1):
    return _deesse.MPDSFreeSimInput(arg1)

def MPDSInitSimInput(arg1):
    return _deesse.MPDSInitSimInput(arg1)

def MPDSPrintSimInput(arg1, arg2, arg3):
    return _deesse.MPDSPrintSimInput(arg1, arg2, arg3)

def MPDSPrintVersion(arg1, arg2, arg3, arg4, arg5):
    return _deesse.MPDSPrintVersion(arg1, arg2, arg3, arg4, arg5)

def MPDSValidateSimInput(arg1, arg2, arg3, arg4):
    return _deesse.MPDSValidateSimInput(arg1, arg2, arg3, arg4)
class mpds_simOutput(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nreal = property(_deesse.mpds_simOutput_nreal_get, _deesse.mpds_simOutput_nreal_set)
    nvarSimPerReal = property(_deesse.mpds_simOutput_nvarSimPerReal_get, _deesse.mpds_simOutput_nvarSimPerReal_set)
    outputSimImage = property(_deesse.mpds_simOutput_outputSimImage_get, _deesse.mpds_simOutput_outputSimImage_set)
    nvarPathIndexPerReal = property(_deesse.mpds_simOutput_nvarPathIndexPerReal_get, _deesse.mpds_simOutput_nvarPathIndexPerReal_set)
    outputPathIndexImage = property(_deesse.mpds_simOutput_outputPathIndexImage_get, _deesse.mpds_simOutput_outputPathIndexImage_set)
    nvarErrorPerReal = property(_deesse.mpds_simOutput_nvarErrorPerReal_get, _deesse.mpds_simOutput_nvarErrorPerReal_set)
    outputErrorImage = property(_deesse.mpds_simOutput_outputErrorImage_get, _deesse.mpds_simOutput_outputErrorImage_set)
    nvarTiGridNodeIndexPerReal = property(_deesse.mpds_simOutput_nvarTiGridNodeIndexPerReal_get, _deesse.mpds_simOutput_nvarTiGridNodeIndexPerReal_set)
    outputTiGridNodeIndexImage = property(_deesse.mpds_simOutput_outputTiGridNodeIndexImage_get, _deesse.mpds_simOutput_outputTiGridNodeIndexImage_set)
    nvarTiIndexPerReal = property(_deesse.mpds_simOutput_nvarTiIndexPerReal_get, _deesse.mpds_simOutput_nvarTiIndexPerReal_set)
    outputTiIndexImage = property(_deesse.mpds_simOutput_outputTiIndexImage_get, _deesse.mpds_simOutput_outputTiIndexImage_set)

    def __init__(self):
        _deesse.mpds_simOutput_swiginit(self, _deesse.new_mpds_simOutput())
    __swig_destroy__ = _deesse.delete_mpds_simOutput

# Register mpds_simOutput in _deesse:
_deesse.mpds_simOutput_swigregister(mpds_simOutput)


def MPDSFreeSimOutput(arg1):
    return _deesse.MPDSFreeSimOutput(arg1)

def MPDSInitSimOutput(arg1):
    return _deesse.MPDSInitSimOutput(arg1)
class mpds_softProbability(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    probabilityConstraintUsage = property(_deesse.mpds_softProbability_probabilityConstraintUsage_get, _deesse.mpds_softProbability_probabilityConstraintUsage_set)
    classOfValues = property(_deesse.mpds_softProbability_classOfValues_get, _deesse.mpds_softProbability_classOfValues_set)
    globalPdf = property(_deesse.mpds_softProbability_globalPdf_get, _deesse.mpds_softProbability_globalPdf_set)
    localPdfImage = property(_deesse.mpds_softProbability_localPdfImage_get, _deesse.mpds_softProbability_localPdfImage_set)
    localPdfSupportRadius = property(_deesse.mpds_softProbability_localPdfSupportRadius_get, _deesse.mpds_softProbability_localPdfSupportRadius_set)
    localCurrentPdfComputation = property(_deesse.mpds_softProbability_localCurrentPdfComputation_get, _deesse.mpds_softProbability_localCurrentPdfComputation_set)
    comparingPdfMethod = property(_deesse.mpds_softProbability_comparingPdfMethod_get, _deesse.mpds_softProbability_comparingPdfMethod_set)
    rejectionMode = property(_deesse.mpds_softProbability_rejectionMode_get, _deesse.mpds_softProbability_rejectionMode_set)
    deactivationDistance = property(_deesse.mpds_softProbability_deactivationDistance_get, _deesse.mpds_softProbability_deactivationDistance_set)
    probabilityConstraintThresholdType = property(_deesse.mpds_softProbability_probabilityConstraintThresholdType_get, _deesse.mpds_softProbability_probabilityConstraintThresholdType_set)
    constantThreshold = property(_deesse.mpds_softProbability_constantThreshold_get, _deesse.mpds_softProbability_constantThreshold_set)
    dynamicThresholdParameters = property(_deesse.mpds_softProbability_dynamicThresholdParameters_get, _deesse.mpds_softProbability_dynamicThresholdParameters_set)

    def __init__(self):
        _deesse.mpds_softProbability_swiginit(self, _deesse.new_mpds_softProbability())
    __swig_destroy__ = _deesse.delete_mpds_softProbability

# Register mpds_softProbability in _deesse:
_deesse.mpds_softProbability_swigregister(mpds_softProbability)


def MPDSFreeSoftProbability(arg1):
    return _deesse.MPDSFreeSoftProbability(arg1)

def MPDSInitSoftProbability(arg1):
    return _deesse.MPDSInitSoftProbability(arg1)

def MPDSPrintSoftProbability(arg1, arg2, arg3):
    return _deesse.MPDSPrintSoftProbability(arg1, arg2, arg3)

def MPDSValidateSoftProbability(arg1, arg2, arg3, arg4):
    return _deesse.MPDSValidateSoftProbability(arg1, arg2, arg3, arg4)

def MPDSOMPSim(arg1, arg2, arg3, arg4, arg5):
    return _deesse.MPDSOMPSim(arg1, arg2, arg3, arg4, arg5)

def MPDSOMPSimComputePyramid(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46):
    return _deesse.MPDSOMPSimComputePyramid(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46)

def MPDSOMPSimComputePyramidInitialSim(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21):
    return _deesse.MPDSOMPSimComputePyramidInitialSim(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21)

def MPDSOMPSimOneReal(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67, arg68, arg69, arg70, arg71, arg72, arg73, arg74, arg75, arg76, arg77):
    return _deesse.MPDSOMPSimOneReal(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67, arg68, arg69, arg70, arg71, arg72, arg73, arg74, arg75, arg76, arg77)

def MPDSOMPSimOneRealWithVariableTransform(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67, arg68, arg69, arg70, arg71, arg72, arg73, arg74, arg75, arg76, arg77):
    return _deesse.MPDSOMPSimOneRealWithVariableTransform(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67, arg68, arg69, arg70, arg71, arg72, arg73, arg74, arg75, arg76, arg77)

def MPDSOMPSimPrepareBlockData(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20):
    return _deesse.MPDSOMPSimPrepareBlockData(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20)

def MPDSOMPSimPrepareData(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17):
    return _deesse.MPDSOMPSimPrepareData(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17)

def MPDSOMPSimPrepareSoftProbability(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15):
    return _deesse.MPDSOMPSimPrepareSoftProbability(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15)

def MPDSOMPSimPyramid(arg1, arg2, arg3, arg4, arg5, arg6):
    return _deesse.MPDSOMPSimPyramid(arg1, arg2, arg3, arg4, arg5, arg6)

def MPDSOMPSimPyramidAllLevelOneByOne(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67, arg68, arg69, arg70, arg71, arg72, arg73, arg74, arg75, arg76, arg77, arg78):
    return _deesse.MPDSOMPSimPyramidAllLevelOneByOne(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67, arg68, arg69, arg70, arg71, arg72, arg73, arg74, arg75, arg76, arg77, arg78)

def MPDSOMPSimPyramidAllLevelOneByOneWithVariableTransform(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67, arg68, arg69, arg70, arg71, arg72, arg73, arg74, arg75, arg76, arg77, arg78):
    return _deesse.MPDSOMPSimPyramidAllLevelOneByOneWithVariableTransform(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67, arg68, arg69, arg70, arg71, arg72, arg73, arg74, arg75, arg76, arg77, arg78)

def MPDSOMPSimPyramidLevelCondToCoarse(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67, arg68, arg69, arg70, arg71, arg72, arg73, arg74, arg75, arg76, arg77, arg78, arg79, arg80, arg81, arg82, arg83, arg84, arg85, arg86, arg87, arg88, arg89, arg90, arg91, arg92, arg93, arg94, arg95, arg96, arg97, arg98, arg99, arg100, arg101, arg102):
    return _deesse.MPDSOMPSimPyramidLevelCondToCoarse(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67, arg68, arg69, arg70, arg71, arg72, arg73, arg74, arg75, arg76, arg77, arg78, arg79, arg80, arg81, arg82, arg83, arg84, arg85, arg86, arg87, arg88, arg89, arg90, arg91, arg92, arg93, arg94, arg95, arg96, arg97, arg98, arg99, arg100, arg101, arg102)

def MPDSOMPSimPyramidLevelCondToCoarseWithVariableTransform(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67, arg68, arg69, arg70, arg71, arg72, arg73, arg74, arg75, arg76, arg77, arg78, arg79, arg80, arg81, arg82, arg83, arg84, arg85, arg86, arg87, arg88, arg89, arg90, arg91, arg92, arg93, arg94, arg95, arg96, arg97, arg98, arg99, arg100, arg101, arg102):
    return _deesse.MPDSOMPSimPyramidLevelCondToCoarseWithVariableTransform(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67, arg68, arg69, arg70, arg71, arg72, arg73, arg74, arg75, arg76, arg77, arg78, arg79, arg80, arg81, arg82, arg83, arg84, arg85, arg86, arg87, arg88, arg89, arg90, arg91, arg92, arg93, arg94, arg95, arg96, arg97, arg98, arg99, arg100, arg101, arg102)

def MPDSOMPSimPyramidLevelCondToFine(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67, arg68, arg69, arg70, arg71, arg72, arg73, arg74, arg75, arg76, arg77, arg78, arg79, arg80, arg81, arg82, arg83, arg84, arg85, arg86, arg87, arg88, arg89, arg90, arg91, arg92, arg93, arg94, arg95, arg96, arg97, arg98, arg99):
    return _deesse.MPDSOMPSimPyramidLevelCondToFine(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67, arg68, arg69, arg70, arg71, arg72, arg73, arg74, arg75, arg76, arg77, arg78, arg79, arg80, arg81, arg82, arg83, arg84, arg85, arg86, arg87, arg88, arg89, arg90, arg91, arg92, arg93, arg94, arg95, arg96, arg97, arg98, arg99)

def MPDSOMPSimPyramidLevelCondToFineWithVariableTransform(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67, arg68, arg69, arg70, arg71, arg72, arg73, arg74, arg75, arg76, arg77, arg78, arg79, arg80, arg81, arg82, arg83, arg84, arg85, arg86, arg87, arg88, arg89, arg90, arg91, arg92, arg93, arg94, arg95, arg96, arg97, arg98, arg99):
    return _deesse.MPDSOMPSimPyramidLevelCondToFineWithVariableTransform(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67, arg68, arg69, arg70, arg71, arg72, arg73, arg74, arg75, arg76, arg77, arg78, arg79, arg80, arg81, arg82, arg83, arg84, arg85, arg86, arg87, arg88, arg89, arg90, arg91, arg92, arg93, arg94, arg95, arg96, arg97, arg98, arg99)

def MPDSOMPSimPyramidSingleLevel(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67, arg68):
    return _deesse.MPDSOMPSimPyramidSingleLevel(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67, arg68)

def MPDSOMPSimPyramidSingleLevelWithVariableTransform(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67, arg68):
    return _deesse.MPDSOMPSimPyramidSingleLevelWithVariableTransform(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67, arg68)

def MPDSOMPSimStandard(arg1, arg2, arg3, arg4, arg5, arg6):
    return _deesse.MPDSOMPSimStandard(arg1, arg2, arg3, arg4, arg5, arg6)

def MPDSOMPSimTransformHomothetyImage(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _deesse.MPDSOMPSimTransformHomothetyImage(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

def MPDSOMPSimTransformRotationImage(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _deesse.MPDSOMPSimTransformRotationImage(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

def new_int_array(nelements):
    return _deesse.new_int_array(nelements)

def delete_int_array(ary):
    return _deesse.delete_int_array(ary)

def int_array_getitem(ary, index):
    return _deesse.int_array_getitem(ary, index)

def int_array_setitem(ary, index, value):
    return _deesse.int_array_setitem(ary, index, value)

def new_intp_array(nelements):
    return _deesse.new_intp_array(nelements)

def delete_intp_array(ary):
    return _deesse.delete_intp_array(ary)

def intp_array_getitem(ary, index):
    return _deesse.intp_array_getitem(ary, index)

def intp_array_setitem(ary, index, value):
    return _deesse.intp_array_setitem(ary, index, value)

def new_double_array(nelements):
    return _deesse.new_double_array(nelements)

def delete_double_array(ary):
    return _deesse.delete_double_array(ary)

def double_array_getitem(ary, index):
    return _deesse.double_array_getitem(ary, index)

def double_array_setitem(ary, index, value):
    return _deesse.double_array_setitem(ary, index, value)

def new_real_array(nelements):
    return _deesse.new_real_array(nelements)

def delete_real_array(ary):
    return _deesse.delete_real_array(ary)

def real_array_getitem(ary, index):
    return _deesse.real_array_getitem(ary, index)

def real_array_setitem(ary, index, value):
    return _deesse.real_array_setitem(ary, index, value)

def new_realp_array(nelements):
    return _deesse.new_realp_array(nelements)

def delete_realp_array(ary):
    return _deesse.delete_realp_array(ary)

def realp_array_getitem(ary, index):
    return _deesse.realp_array_getitem(ary, index)

def realp_array_setitem(ary, index, value):
    return _deesse.realp_array_setitem(ary, index, value)

def new_MPDS_IMAGE_array(nelements):
    return _deesse.new_MPDS_IMAGE_array(nelements)

def delete_MPDS_IMAGE_array(ary):
    return _deesse.delete_MPDS_IMAGE_array(ary)

def MPDS_IMAGE_array_getitem(ary, index):
    return _deesse.MPDS_IMAGE_array_getitem(ary, index)

def MPDS_IMAGE_array_setitem(ary, index, value):
    return _deesse.MPDS_IMAGE_array_setitem(ary, index, value)

def new_MPDS_POINTSET_array(nelements):
    return _deesse.new_MPDS_POINTSET_array(nelements)

def delete_MPDS_POINTSET_array(ary):
    return _deesse.delete_MPDS_POINTSET_array(ary)

def MPDS_POINTSET_array_getitem(ary, index):
    return _deesse.MPDS_POINTSET_array_getitem(ary, index)

def MPDS_POINTSET_array_setitem(ary, index, value):
    return _deesse.MPDS_POINTSET_array_setitem(ary, index, value)

def new_MPDS_SEARCHNEIGHBORHOODPARAMETERS_array(nelements):
    return _deesse.new_MPDS_SEARCHNEIGHBORHOODPARAMETERS_array(nelements)

def delete_MPDS_SEARCHNEIGHBORHOODPARAMETERS_array(ary):
    return _deesse.delete_MPDS_SEARCHNEIGHBORHOODPARAMETERS_array(ary)

def MPDS_SEARCHNEIGHBORHOODPARAMETERS_array_getitem(ary, index):
    return _deesse.MPDS_SEARCHNEIGHBORHOODPARAMETERS_array_getitem(ary, index)

def MPDS_SEARCHNEIGHBORHOODPARAMETERS_array_setitem(ary, index, value):
    return _deesse.MPDS_SEARCHNEIGHBORHOODPARAMETERS_array_setitem(ary, index, value)

def new_MPDS_RESCALINGMODE_array(nelements):
    return _deesse.new_MPDS_RESCALINGMODE_array(nelements)

def delete_MPDS_RESCALINGMODE_array(ary):
    return _deesse.delete_MPDS_RESCALINGMODE_array(ary)

def MPDS_RESCALINGMODE_array_getitem(ary, index):
    return _deesse.MPDS_RESCALINGMODE_array_getitem(ary, index)

def MPDS_RESCALINGMODE_array_setitem(ary, index, value):
    return _deesse.MPDS_RESCALINGMODE_array_setitem(ary, index, value)

def new_MPDS_SOFTPROBABILITY_array(nelements):
    return _deesse.new_MPDS_SOFTPROBABILITY_array(nelements)

def delete_MPDS_SOFTPROBABILITY_array(ary):
    return _deesse.delete_MPDS_SOFTPROBABILITY_array(ary)

def MPDS_SOFTPROBABILITY_array_getitem(ary, index):
    return _deesse.MPDS_SOFTPROBABILITY_array_getitem(ary, index)

def MPDS_SOFTPROBABILITY_array_setitem(ary, index, value):
    return _deesse.MPDS_SOFTPROBABILITY_array_setitem(ary, index, value)

def new_MPDS_CONNECTIVITY_array(nelements):
    return _deesse.new_MPDS_CONNECTIVITY_array(nelements)

def delete_MPDS_CONNECTIVITY_array(ary):
    return _deesse.delete_MPDS_CONNECTIVITY_array(ary)

def MPDS_CONNECTIVITY_array_getitem(ary, index):
    return _deesse.MPDS_CONNECTIVITY_array_getitem(ary, index)

def MPDS_CONNECTIVITY_array_setitem(ary, index, value):
    return _deesse.MPDS_CONNECTIVITY_array_setitem(ary, index, value)

def new_MPDS_BLOCKDATA_array(nelements):
    return _deesse.new_MPDS_BLOCKDATA_array(nelements)

def delete_MPDS_BLOCKDATA_array(ary):
    return _deesse.delete_MPDS_BLOCKDATA_array(ary)

def MPDS_BLOCKDATA_array_getitem(ary, index):
    return _deesse.MPDS_BLOCKDATA_array_getitem(ary, index)

def MPDS_BLOCKDATA_array_setitem(ary, index, value):
    return _deesse.MPDS_BLOCKDATA_array_setitem(ary, index, value)

def new_MPDS_PYRAMIDPARAMETERS_array(nelements):
    return _deesse.new_MPDS_PYRAMIDPARAMETERS_array(nelements)

def delete_MPDS_PYRAMIDPARAMETERS_array(ary):
    return _deesse.delete_MPDS_PYRAMIDPARAMETERS_array(ary)

def MPDS_PYRAMIDPARAMETERS_array_getitem(ary, index):
    return _deesse.MPDS_PYRAMIDPARAMETERS_array_getitem(ary, index)

def MPDS_PYRAMIDPARAMETERS_array_setitem(ary, index, value):
    return _deesse.MPDS_PYRAMIDPARAMETERS_array_setitem(ary, index, value)

def malloc_MPDS_BLOCKDATA(*args):
    return _deesse.malloc_MPDS_BLOCKDATA(*args)

def calloc_MPDS_BLOCKDATA(*args):
    return _deesse.calloc_MPDS_BLOCKDATA(*args)

def realloc_MPDS_BLOCKDATA(ptr, nitems):
    return _deesse.realloc_MPDS_BLOCKDATA(ptr, nitems)

def free_MPDS_BLOCKDATA(ptr):
    return _deesse.free_MPDS_BLOCKDATA(ptr)
sizeof_MPDS_BLOCKDATA = _deesse.sizeof_MPDS_BLOCKDATA

def malloc_MPDS_CLASSOFVALUES(*args):
    return _deesse.malloc_MPDS_CLASSOFVALUES(*args)

def calloc_MPDS_CLASSOFVALUES(*args):
    return _deesse.calloc_MPDS_CLASSOFVALUES(*args)

def realloc_MPDS_CLASSOFVALUES(ptr, nitems):
    return _deesse.realloc_MPDS_CLASSOFVALUES(ptr, nitems)

def free_MPDS_CLASSOFVALUES(ptr):
    return _deesse.free_MPDS_CLASSOFVALUES(ptr)
sizeof_MPDS_CLASSOFVALUES = _deesse.sizeof_MPDS_CLASSOFVALUES

def malloc_MPDS_CONNECTIVITY(*args):
    return _deesse.malloc_MPDS_CONNECTIVITY(*args)

def calloc_MPDS_CONNECTIVITY(*args):
    return _deesse.calloc_MPDS_CONNECTIVITY(*args)

def realloc_MPDS_CONNECTIVITY(ptr, nitems):
    return _deesse.realloc_MPDS_CONNECTIVITY(ptr, nitems)

def free_MPDS_CONNECTIVITY(ptr):
    return _deesse.free_MPDS_CONNECTIVITY(ptr)
sizeof_MPDS_CONNECTIVITY = _deesse.sizeof_MPDS_CONNECTIVITY

def malloc_MPDS_IMAGE(*args):
    return _deesse.malloc_MPDS_IMAGE(*args)

def calloc_MPDS_IMAGE(*args):
    return _deesse.calloc_MPDS_IMAGE(*args)

def realloc_MPDS_IMAGE(ptr, nitems):
    return _deesse.realloc_MPDS_IMAGE(ptr, nitems)

def free_MPDS_IMAGE(ptr):
    return _deesse.free_MPDS_IMAGE(ptr)
sizeof_MPDS_IMAGE = _deesse.sizeof_MPDS_IMAGE

def malloc_MPDS_POINTSET(*args):
    return _deesse.malloc_MPDS_POINTSET(*args)

def calloc_MPDS_POINTSET(*args):
    return _deesse.calloc_MPDS_POINTSET(*args)

def realloc_MPDS_POINTSET(ptr, nitems):
    return _deesse.realloc_MPDS_POINTSET(ptr, nitems)

def free_MPDS_POINTSET(ptr):
    return _deesse.free_MPDS_POINTSET(ptr)
sizeof_MPDS_POINTSET = _deesse.sizeof_MPDS_POINTSET

def malloc_MPDS_PYRAMIDGENERALPARAMETERS(*args):
    return _deesse.malloc_MPDS_PYRAMIDGENERALPARAMETERS(*args)

def calloc_MPDS_PYRAMIDGENERALPARAMETERS(*args):
    return _deesse.calloc_MPDS_PYRAMIDGENERALPARAMETERS(*args)

def realloc_MPDS_PYRAMIDGENERALPARAMETERS(ptr, nitems):
    return _deesse.realloc_MPDS_PYRAMIDGENERALPARAMETERS(ptr, nitems)

def free_MPDS_PYRAMIDGENERALPARAMETERS(ptr):
    return _deesse.free_MPDS_PYRAMIDGENERALPARAMETERS(ptr)
sizeof_MPDS_PYRAMIDGENERALPARAMETERS = _deesse.sizeof_MPDS_PYRAMIDGENERALPARAMETERS

def malloc_MPDS_PYRAMIDPARAMETERS(*args):
    return _deesse.malloc_MPDS_PYRAMIDPARAMETERS(*args)

def calloc_MPDS_PYRAMIDPARAMETERS(*args):
    return _deesse.calloc_MPDS_PYRAMIDPARAMETERS(*args)

def realloc_MPDS_PYRAMIDPARAMETERS(ptr, nitems):
    return _deesse.realloc_MPDS_PYRAMIDPARAMETERS(ptr, nitems)

def free_MPDS_PYRAMIDPARAMETERS(ptr):
    return _deesse.free_MPDS_PYRAMIDPARAMETERS(ptr)
sizeof_MPDS_PYRAMIDPARAMETERS = _deesse.sizeof_MPDS_PYRAMIDPARAMETERS

def malloc_MPDS_RESCALINGMODE(*args):
    return _deesse.malloc_MPDS_RESCALINGMODE(*args)

def calloc_MPDS_RESCALINGMODE(*args):
    return _deesse.calloc_MPDS_RESCALINGMODE(*args)

def realloc_MPDS_RESCALINGMODE(ptr, nitems):
    return _deesse.realloc_MPDS_RESCALINGMODE(ptr, nitems)

def free_MPDS_RESCALINGMODE(ptr):
    return _deesse.free_MPDS_RESCALINGMODE(ptr)
sizeof_MPDS_RESCALINGMODE = _deesse.sizeof_MPDS_RESCALINGMODE

def malloc_MPDS_SEARCHNEIGHBORHOODPARAMETERS(*args):
    return _deesse.malloc_MPDS_SEARCHNEIGHBORHOODPARAMETERS(*args)

def calloc_MPDS_SEARCHNEIGHBORHOODPARAMETERS(*args):
    return _deesse.calloc_MPDS_SEARCHNEIGHBORHOODPARAMETERS(*args)

def realloc_MPDS_SEARCHNEIGHBORHOODPARAMETERS(ptr, nitems):
    return _deesse.realloc_MPDS_SEARCHNEIGHBORHOODPARAMETERS(ptr, nitems)

def free_MPDS_SEARCHNEIGHBORHOODPARAMETERS(ptr):
    return _deesse.free_MPDS_SEARCHNEIGHBORHOODPARAMETERS(ptr)
sizeof_MPDS_SEARCHNEIGHBORHOODPARAMETERS = _deesse.sizeof_MPDS_SEARCHNEIGHBORHOODPARAMETERS

def malloc_MPDS_SIMANDPATHPARAMETERS(*args):
    return _deesse.malloc_MPDS_SIMANDPATHPARAMETERS(*args)

def calloc_MPDS_SIMANDPATHPARAMETERS(*args):
    return _deesse.calloc_MPDS_SIMANDPATHPARAMETERS(*args)

def realloc_MPDS_SIMANDPATHPARAMETERS(ptr, nitems):
    return _deesse.realloc_MPDS_SIMANDPATHPARAMETERS(ptr, nitems)

def free_MPDS_SIMANDPATHPARAMETERS(ptr):
    return _deesse.free_MPDS_SIMANDPATHPARAMETERS(ptr)
sizeof_MPDS_SIMANDPATHPARAMETERS = _deesse.sizeof_MPDS_SIMANDPATHPARAMETERS

def malloc_MPDS_SOFTPROBABILITY(*args):
    return _deesse.malloc_MPDS_SOFTPROBABILITY(*args)

def calloc_MPDS_SOFTPROBABILITY(*args):
    return _deesse.calloc_MPDS_SOFTPROBABILITY(*args)

def realloc_MPDS_SOFTPROBABILITY(ptr, nitems):
    return _deesse.realloc_MPDS_SOFTPROBABILITY(ptr, nitems)

def free_MPDS_SOFTPROBABILITY(ptr):
    return _deesse.free_MPDS_SOFTPROBABILITY(ptr)
sizeof_MPDS_SOFTPROBABILITY = _deesse.sizeof_MPDS_SOFTPROBABILITY

def malloc_MPDS_SIMINPUT(*args):
    return _deesse.malloc_MPDS_SIMINPUT(*args)

def calloc_MPDS_SIMINPUT(*args):
    return _deesse.calloc_MPDS_SIMINPUT(*args)

def realloc_MPDS_SIMINPUT(ptr, nitems):
    return _deesse.realloc_MPDS_SIMINPUT(ptr, nitems)

def free_MPDS_SIMINPUT(ptr):
    return _deesse.free_MPDS_SIMINPUT(ptr)
sizeof_MPDS_SIMINPUT = _deesse.sizeof_MPDS_SIMINPUT

def malloc_MPDS_SIMOUTPUT(*args):
    return _deesse.malloc_MPDS_SIMOUTPUT(*args)

def calloc_MPDS_SIMOUTPUT(*args):
    return _deesse.calloc_MPDS_SIMOUTPUT(*args)

def realloc_MPDS_SIMOUTPUT(ptr, nitems):
    return _deesse.realloc_MPDS_SIMOUTPUT(ptr, nitems)

def free_MPDS_SIMOUTPUT(ptr):
    return _deesse.free_MPDS_SIMOUTPUT(ptr)
sizeof_MPDS_SIMOUTPUT = _deesse.sizeof_MPDS_SIMOUTPUT

def malloc_MPDS_PROGRESSMONITOR(*args):
    return _deesse.malloc_MPDS_PROGRESSMONITOR(*args)

def calloc_MPDS_PROGRESSMONITOR(*args):
    return _deesse.calloc_MPDS_PROGRESSMONITOR(*args)

def realloc_MPDS_PROGRESSMONITOR(ptr, nitems):
    return _deesse.realloc_MPDS_PROGRESSMONITOR(ptr, nitems)

def free_MPDS_PROGRESSMONITOR(ptr):
    return _deesse.free_MPDS_PROGRESSMONITOR(ptr)
sizeof_MPDS_PROGRESSMONITOR = _deesse.sizeof_MPDS_PROGRESSMONITOR
MPDSUpdateProgressMonitor0_ptr = _deesse.MPDSUpdateProgressMonitor0_ptr
MPDSUpdateProgressMonitorAllOnlyPercentStdout_ptr = _deesse.MPDSUpdateProgressMonitorAllOnlyPercentStdout_ptr
MPDSUpdateProgressMonitorAllStdout_ptr = _deesse.MPDSUpdateProgressMonitorAllStdout_ptr
MPDSUpdateProgressMonitorStdout_ptr = _deesse.MPDSUpdateProgressMonitorStdout_ptr
MPDSUpdateProgressMonitorWarningOnlyStdout_ptr = _deesse.MPDSUpdateProgressMonitorWarningOnlyStdout_ptr

def mpds_get_error_message(ierr):
    return _deesse.mpds_get_error_message(ierr)

def mpds_get_warning_message(iwarn):
    return _deesse.mpds_get_warning_message(iwarn)

def mpds_set_int_vector_from_array(vector, offset, array):
    return _deesse.mpds_set_int_vector_from_array(vector, offset, array)

def mpds_set_double_vector_from_array(vector, offset, array):
    return _deesse.mpds_set_double_vector_from_array(vector, offset, array)

def mpds_set_real_vector_from_array(vector, offset, array):
    return _deesse.mpds_set_real_vector_from_array(vector, offset, array)

def mpds_set_real_vector_to_cst(arg1, arg2, arg3, arg4):
    return _deesse.mpds_set_real_vector_to_cst(arg1, arg2, arg3, arg4)

def mpds_get_array_from_int_vector(vector, offset, array):
    return _deesse.mpds_get_array_from_int_vector(vector, offset, array)

def mpds_get_array_from_double_vector(vector, offset, array):
    return _deesse.mpds_get_array_from_double_vector(vector, offset, array)

def mpds_get_array_from_real_vector(vector, offset, array):
    return _deesse.mpds_get_array_from_real_vector(vector, offset, array)

def mpds_set_connectivity_varname(connectivity, STRING):
    return _deesse.mpds_set_connectivity_varname(connectivity, STRING)

def mpds_set_outputReportFileName(simInput, STRING):
    return _deesse.mpds_set_outputReportFileName(simInput, STRING)

def mpds_set_outputVarFlag(simInput, flag):
    return _deesse.mpds_set_outputVarFlag(simInput, flag)

def mpds_set_relativeDistanceFlag(simInput, flag):
    return _deesse.mpds_set_relativeDistanceFlag(simInput, flag)

def mpds_set_simGridAsTiFlag(simInput, flag):
    return _deesse.mpds_set_simGridAsTiFlag(simInput, flag)

def mpds_set_varname(varname, index, STRING):
    return _deesse.mpds_set_varname(varname, index, STRING)

def mpds_get_varname(varname, index):
    return _deesse.mpds_get_varname(varname, index)


